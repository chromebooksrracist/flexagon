[meta title:"Interactive Flexagon" description:"Interactive explanation of flexagons" /]

[Header
  title:"Tuckerman Traverse"
  subtitle:"Using the pinch flex to visit every side of a flexagon"
  author:"Scott Sherman"
  authorLink:"http://loki3.com/flex" /]

[var name:'drawOptions' value:`{structure:true, showIds:false}`/]
[var name:'defaultPats' value:6 /]
[var name:'defaultColors' value:`[0x2E4172, 0x2B803E, 0xAA4439, 0x622870, 0xffff00, 0x553900, 0xdddddd, 0x999999]` /]


[Aside]
  [div]
    [Inline][Flexagon width:150 height:150 numPats:6 options:`{showIds: false}` /][/Inline]
    [Inline][Flexagon width:150 height:150 numPats:9 options:`{showIds: false}` /][/Inline]
  [/div]
  [div]
    [Inline][Flexagon width:150 height:150 numPats:7 options:`{showIds: false}` /][/Inline]
    [Inline][Flexagon width:150 height:150 numPats:10 options:`{showIds: false}` initialScript:`{angles: [36, 54]}` /][/Inline]
  [/div]
[/Aside]

Flexagons are interesting puzzles made from folding strips of paper.
You can make them from a wide variety of polygons: various triangles, quadrilaterals, pentagons, and so on.
Once folded, you 'flex' them, i.e. fold them in different ways, in order to find new sides and rearrange the polygons.

The most common flexagons are made up of 6 equilateral triangles arranged in a hexagon; thus they're called *hexaflexagons*.
And the most common flex is the *pinch flex*, which is one way to rearrange the triangles to reveal previously hidden faces.
But it's not obvious at first where to apply the pinch flex in order to find every face.

This explorable will teach you how to use the *Tuckerman Traverse* to find all the hidden faces.
Along the way, it also introduces you to
[flex notation](https://github.com/loki3/flexagonator/blob/master/docs/flex-notation.md),
which is used to describe a series of flexes,
and [pat notation](https://github.com/loki3/flexagonator/blob/master/docs/pat-notation.md),
which is used to describe the internal structure of a flexagon.


# 3-sided hexaflexagon

[derived name:'sides3' value:`[
  {searchFlexes:"P"},
  {flexAndColor: { flexes: 'P*', colors: defaultColors }},
  {reverseFlexes: 'P*'},
  {history: 'clear'}
  ]` /]
[var name:'history3' value:'' /]

We'll start with the simple 3-sided hexaflexagon (AKA trihexaflexagon).
The hexagon below has numbers and colors on each triangle, which change as you perform a flex.
`P` is the *flex notation* for a *pinch flex*.
The clickable buttons labeled with a `P` indicate the corners where you can perform a pinch flex.
Since a pinch flex involves doing a mountain-valley fold alternating every other vertex,
the exact same pinch flex can be achieved by picking corner 1, 3, or 5 (numbered around the hexagon).

Try clicking on the buttons and watch how the flexagon changes and how this is tracked in the diagram on the right.


[Aside]
  This diagram tracks the faces you've visited as you pinch flex the flexagon.
  The green circle marks the original face, and the red circle marks the current face.

  [PinchGraph width:400 height:100 generator:'P*' flexes:history3 /]
[/Aside]

[Flexagon width:500 height:300 numPats:defaultPats initialScript:sides3 history:history3 options:drawOptions /]

But everything on this page is just a simulation of an actual model.
The fun part is in creating and flexing the real thing.
After each simulation is the strip (AKA template, frieze, or net) you can print, fold, and optionally decorate to create a real flexagon.
Here's the unfolded strip for the 3-sided hexaflexagon.

[Unfolded width:800 height:150 numPats:defaultPats generator:'P*' autoLabel:true /]

[var name:"showFoldingHelp" value:false /]
[Button onClick:` showFoldingHelp = !showFoldingHelp `]Show/hide folding instructions.[/Button]
[Conditional if:` showFoldingHelp `]
  These instructions apply to all the strips on this page.

  **Cut:**
  Start by printing out the strip and cutting along the outside edges.

  **Prefold:**
  After you've cut out the shape, fold and unfold along every dashed line to prepare it.
  Note that the first and last triangle in the strip have dashed lines to indicate where to tape the edges after folding.

  **Number:**
  The large number on each triangle represents the number on the *front* of the triangle, while the small number represents the number on the *back*.
  Copy the small number from each triangle onto the back.

  **Fold:**
  Find the largest pairs of adjacent numbers and fold those numbers together.
  Then find the next largest pairs of adjacent numbers and fold them together.
  Continue in this way until the only numbers still visible are the 1's and the 2's.

  **Tape:**
  You should now have a hexagon consisting of 6 equilateral triangles.
  Tape the edges of the first and last triangles together to complete the flexagon.
[/Conditional]


# 4-sided hexaflexagon

[derived name:'sides4' value:`[
  {searchFlexes:"P"},
  {flexAndColor: { flexes: 'P*P*', colors:defaultColors }},
  {reverseFlexes: 'P*P*'},
  {history: 'clear'}
  ]` /]
[var name:'history4' value:'' /]
[var name:'runScript4' value:'' /]
[var name:'script4' value:'' /]

[Aside]
  Pick [Button onClick:` script4 = {history: 'reset'}; runScript4 = true `]reset[/Button] to start over,
  or [Button onClick:` script4 = {history: 'undo'}; runScript4 = true `]undo[/Button] to undo the last flex.
[/Aside]

Next is the 4-sided hexaflexagon.
After your first pinch flex, you find yourself in the middle of the diagram, with multiple paths you can take.
What happens when you try pinch flexing at different corners?
How can you visit every point in the diagram in the fewest number of flexes?
Do you notice a pattern?

[Aside]
  [PinchGraph width:400 height:200 generator:'P*P*' flexes:history4 /]
[/Aside]

[Flexagon width:500 height:300 numPats:defaultPats initialScript:sides4 history:history4
  runScript:runScript4 script:script4 options:drawOptions /]


Something else to pay attention to is the notation beside each edge of the flexagon.
This describes the internal structure of each *pat*, or stack of triangles.
`-` indicates that there's only a single leaf in the pat, while `[- -]` indicates two leaves in a pat.
Three leaves can be arranged either as `[[- -] -]` or `[- [- -]]`.
If you flex a real flexagon as you flex the simulation, you can start to get a feel for what this represents.
And if you put a unique number on every leaf, you can use those numbers instead of the dashes to make this description more explicit.

[Unfolded width:1000 height:250 numPats:defaultPats generator:'P*P*' autoLabel:true /]


# 5-sided hexaflexagon

[derived name:'sides5' value:`[
  {searchFlexes:"P"},
  {flexAndColor: { flexes: 'P*P*P*', colors:defaultColors }},
  {reverseFlexes: 'P*P*P*'},
  {history: 'clear'}
  ]` /]
[var name:'history5' value:'' /]
[var name:'runScript5' value:'' /]
[var name:'script5' value:'' /]

[Aside]
  [Button onClick:` script5 = {history: 'reset'}; runScript5 = true `]reset[/Button]
  [Button onClick:` script5 = {history: 'undo'}; runScript5 = true `]undo[/Button]
[/Aside]

If you figured out a simple way to visit every state for the 4-sided version,
does this same pattern work for visiting every state in the 5-sided variant?
If not, perhaps a bit of experimentation can lead you to a simple pattern that works for both.

[Aside]
  [PinchGraph width:400 height:200 generator:'P*P*P*' flexes:history5 /]
  History: [Display value:history5 /]

  (The history uses *flex notation* to describe the series of flexes you've performed.)
[/Aside]

[Flexagon width:500 height:300 numPats:defaultPats initialScript:sides5 history:history5
  runScript:runScript5 script:script5 options:drawOptions /]

*Flex notation* is used to describe a series of flexes so that you can later reproduce the exact same sequence.
Flexes are performed relative to the 'current vertex', which is indicated by a `*` in these flexagon simulations.
Rotating the current vertex one vertex clockwise is represented by `>`, and counterclockwise by `<`.
Thus `P>P` means a pinch flex followed by a pinch flex starting one vertex clockwise from the original corner.
`^` means turn the flexagon over.

[Unfolded width:900 height:400 numPats:defaultPats generator:'P*P*P*' autoLabel:true /]


# 6-sided hexaflexagons

[var name:'runScript6' value:false /]
[var name:'initFlex6' value:'' /]
[derived name:'sides6' value:`[
  {numPats: defaultPats},
  {searchFlexes:"P"},
  {flexAndColor: { flexes: initFlex6, colors:defaultColors }},
  {reverseFlexes: initFlex6},
  {history: 'clear'}
  ]` /]
[var name:'history6' value:'' /]

There are three different ways to make a 6-sided hexaflexagon, each made from different strips with different traversals.
Try applying the same pattern you used for the 4 and 5-sided hexaflexagons to see if it works.
Click on the following buttons to switch between variations
[Button onClick:` initFlex6 = 'P* P* P+ > P P*'; runScript6=true; `]A[/Button],
[Button onClick:` initFlex6 = '(P*^>)4'; runScript6=true; `]B[/Button], and
[Button onClick:` initFlex6 = '(P*)4'; runScript6=true; `]C[/Button]

[Aside]
  [PinchGraph width:300 height:250 generator:initFlex6 flexes:history6 /]
  History: [Display value:history6 /]
[/Aside]

[Flexagon width:500 height:300 numPats:defaultPats runScript:runScript6 script:sides6 history:history6 options:drawOptions /]

[var name:"showTuckerman" value:false /]
The Tuckerman Traverse is a general pattern that allows you to easily visit every side that's accessible using the pinch flex.
Once you've tried finding a pattern, click on
[Button onClick:` showTuckerman = !showTuckerman `]describe the Tuckerman Traverse[/Button]
to see if you've found the same pattern.

[Conditional if:` showTuckerman `]
  Starting with any corner, repeatedly do a pinch flex until the structure of the flexagon no longer permits it.
  Switch to an adjacent corner and repeat the same process, doing a pinch flex until you can't any longer.
  This will eventually visit every part of the diagram associated with the flexagon, visiting every configuration in the process.
[/Conditional]

[Unfolded width:1000 height:500 numPats:defaultPats generator:initFlex6 autoLabel:true /]


# 7 and 8-sided hexaflexagons

[var name:'runScript7' value:false /]
[var name:'initFlex7' value:'' /]
[derived name:'sides7' value:`[
  {numPats: defaultPats},
  {searchFlexes:"P"},
  {flexAndColor: { flexes: initFlex7, colors:defaultColors }},
  {reverseFlexes: initFlex7},
  {history: 'clear'}
  ]` /]
[var name:'history7' value:'' /]
[var name:'special7' value:0 /]
[var name:'cheight7' value:500 /]

Now that you know the Tuckerman Traverse, you can try it on the four 7-sided hexaflexagons and twelve 8-sided hexaflexagons.
Try out the 7-sided variation
[Button onClick:` initFlex7 = '(P*^>)5'; runScript7=true; special7=0; cheight7=500 `]A[/Button],
[Button onClick:` initFlex7 = 'P* P* P* P+ > P P*'; runScript7=true; special7=0; cheight7=500 `]B[/Button],
[Button onClick:` initFlex7 = 'P* P* P* ^ > P* P*'; runScript7=true; special7=0; cheight7=500 `]C[/Button], or
[Button onClick:` initFlex7 = '(P*)5'; runScript7=true; special7=1; cheight7=1 `]D[/Button],
and 8-sided variation
[Button onClick:` initFlex7 = '(P*^>)6'; runScript7=true; special7=0; cheight7=500 `]A[/Button],
[Button onClick:` initFlex7 = 'P* P* P* P+ > P P* P*'; runScript7=true; special7=0; cheight7=500 `]B[/Button],
[Button onClick:` initFlex7 = 'P*P*P*>P*P*P+>P*P*'; runScript7=true; special7=0; cheight7=500 `]C[/Button],
[Button onClick:` initFlex7 = '(P*) x 3 (^ > P*) x 3'; runScript7=true; special7=0; cheight7=500 `]D[/Button],
[Button onClick:` initFlex7 = '(P*) x 3 ^ > (P*) x 3'; runScript7=true; special7=0; cheight7=500 `]E[/Button],
[Button onClick:` initFlex7 = 'P* P* ^>P* P+ <P* P* P*'; runScript7=true; special7=0; cheight7=500 `]F[/Button],
[Button onClick:` initFlex7 = 'P* ^>P* P+ >P ^>P* P+ >P ^>P*'; runScript7=true; special7=0; cheight7=500 `]G[/Button],
[Button onClick:` initFlex7 = 'P* ^>P* ^>P* P* ^>P* ^>P*'; runScript7=true; special7=4; cheight7=1 `]H[/Button],
[Button onClick:` initFlex7 = 'P* P* ^>P* P+ >P ^>P* P*'; runScript7=true; special7=0; cheight7=500 `]I[/Button],
[Button onClick:` initFlex7 = 'P* P* P* P* P+ > P P*'; runScript7=true; special7=0; cheight7=500 `]J[/Button],
[Button onClick:` initFlex7 = '(P*) x 4 ^ > (P*) x 2'; runScript7=true; special7=2; cheight7=1 `]K[/Button], or
[Button onClick:` initFlex7 = '(P*)6'; runScript7=true; special7=3; cheight7=1 `]L[/Button].

[Aside]
  [PinchGraph width:300 height:250 generator:initFlex7 flexes:history7 /]
  History: [Display value:history7 /]
[/Aside]

[Flexagon width:500 height:300 numPats:defaultPats runScript:runScript7 script:sides7 history:history7 options:drawOptions overButton:true /]

[Conditional if:` special7 == 0 `]
  The unfolded strip:
[/Conditional]
[Unfolded width:1000 height:500 numPats:defaultPats generator:initFlex7 autoLabel:true special7:special7 changeHeight:cheight7 /]

[Conditional if:` special7 == 1 `]
  The following strip takes a little bit of extra work to assemble.
  Cut out each of the shapes, cutting along the solid lines.
  Tape 'b' to 'b' and 'c' to 'c'.
  Then you can follow the same folding rules as for the other strips,
  finishing by taping 'a' to 'a'.

  [var name:'hepta1' value:`{start:0, end:6, scale:150, rotation:60, captions:[{ text: 'a', which: 0 }, { text: 'b', which: -1 }] }` /]
  [var name:'hepta2' value:`{start:7, end:13, scale:150, rotation:60, captions:[{ text: 'b', which: 0 }, { text: 'c', which: -1 }] }` /]
  [var name:'hepta3' value:`{start:14, scale:150, rotation:60, captions:[{ text: 'c', which: 0 }, { text: 'a', which: -1 }] }` /]
  [Unfolded width:400 height:300 numPats:defaultPats generator:'(P*)5' autoLabel:true options:hepta1 /]
  [Unfolded width:400 height:300 numPats:defaultPats generator:'(P*)5' autoLabel:true options:hepta2 /]
  [Unfolded width:400 height:300 numPats:defaultPats generator:'(P*)5' autoLabel:true options:hepta3 /]
[/Conditional]

[Conditional if:` special7 == 2 `]
  The following strip takes a little bit of extra work to assemble.
  Cut out each of the shapes, cutting along the solid lines and the lines between 'a' and 'b'.
  Tape 'b' to 'b'.
  Then you can follow the same folding rules as for the other strips,
  finishing by taping 'a' to 'a'.

  [var name:'octa1a' value:`{start:0, end:13, scale:150, rotation:60, captions:[{ text: 'a', which: 0 }, { text: 'b', which: -1 }] }` /]
  [var name:'octa2a' value:`{start:14, scale:150, rotation:60, captions:[{ text: 'b', which: 0 }, { text: 'a', which: -1 }] }` /]
  [Unfolded width:400 height:520 numPats:defaultPats generator:'(P*) x 4 ^ > (P*) x 2' autoLabel:true options:octa1a /]
  [Unfolded width:450 height:270 numPats:defaultPats generator:'(P*) x 4 ^ > (P*) x 2' autoLabel:true options:octa2a /]
[/Conditional]

[Conditional if:` special7 == 3 `]
  The following strip takes a little bit of extra work to assemble.
  Cut out each of the shapes, cutting along the solid lines.
  Tape 'b' to 'b', 'c' to 'c', and 'd' to 'd'.
  Then you can follow the same folding rules as for the other strips,
  finishing by taping 'a' to 'a'.

  [var name:'octa1b' value:`{start:0, end:6, scale:150, rotation:60, captions:[{ text: 'a', which: 0 }, { text: 'b', which: -1 }] }` /]
  [var name:'octa2b' value:`{start:7, end:14, scale:150, rotation:0, captions:[{ text: 'b', which: 0 }, { text: 'c', which: -1 }] }` /]
  [var name:'octa3b' value:`{start:15, end:22, scale:150, rotation:60, captions:[{ text: 'c', which: 0 }, { text: 'd', which: -1 }] }` /]
  [var name:'octa4b' value:`{start:23, scale:150, rotation:0, captions:[{ text: 'd', which: 0 }, { text: 'a', which: -1 }] }` /]
  [Unfolded width:500 height:280 numPats:defaultPats generator:'(P*)6' autoLabel:true options:octa1b /]
  [Unfolded width:500 height:280 numPats:defaultPats generator:'(P*)6' autoLabel:true options:octa2b /]
  [Unfolded width:500 height:280 numPats:defaultPats generator:'(P*)6' autoLabel:true options:octa3b /]
  [Unfolded width:500 height:130 numPats:defaultPats generator:'(P*)6' autoLabel:true options:octa4b /]
[/Conditional]

[Conditional if:` special7 == 4 `]
  The following strip takes a little bit of extra work to assemble.
  Cut out each of the shapes, cutting along the solid lines.
  Tape 'b' to 'b'.
  Then you can follow the same folding rules as for the other strips,
  finishing by taping 'a' to 'a'.

  [var name:'octa1c' value:`{start:0, end:13, scale:150, rotation:60, captions:[{ text: 'a', which: 0 }, { text: 'b', which: -1 }] }` /]
  [var name:'octa2c' value:`{start:14, scale:150, rotation:0, captions:[{ text: 'b', which: 0 }, { text: 'a', which: -1 }] }` /]
  [Unfolded width:530 height:400 numPats:defaultPats generator:'P* ^>P* ^>P* P* ^>P* ^>P*' autoLabel:true options:octa1c /]
  [Unfolded width:530 height:260 numPats:defaultPats generator:'P* ^>P* ^>P* P* ^>P* ^>P*' autoLabel:true options:octa2c /]
[/Conditional]


# Other triangles

So far we've been looking at 6 equilateral triangles per side,
but there's no need to have exactly 6 per side, nor do we need to stick to equilateral triangles.
We can carry out the Tuckerman Traverse on a wide variety of triangle flexagons.
However, this may mean that the flexagon doesn't always lie flat because the angles may not add up to 360 degrees.

[var name:'initFlexesN' value:'' /]
[var name:'patCountN' value:6 /]
[derived name:'sidesN' value:`[
  {searchFlexes:"P"},
  {flexAndColor: { flexes: initFlexesN, colors:defaultColors }},
  {reverseFlexes: initFlexesN},
  {history: 'clear'}
  ]` /]
[var name:'historyN' value:'' /]
[var name:'runScriptN' value:false /]
[var name:'runInitN' value:false /]
[var name:'scriptN' value:'' /]

Try experimenting with different types of changes:
* Switch the number of triangles per side so you have an [Button onClick:` patCountN=8; `]octaflexagon[/Button], [Button onClick:` patCountN=10; `]decaflexagon[/Button], or [Button onClick:` patCountN=12; `]dodecaflexagon[/Button].
* Change the number of sides to [Button onClick:` initFlexesN='P*'; runInitN=true `]3[/Button], [Button onClick:` initFlexesN='P*P*'; runInitN=true `]4[/Button], or [Button onClick:` initFlexesN='P*P*P*'; runInitN=true `]5[/Button].

[Aside]
  [Button onClick:` scriptN = {history: 'reset'}; runScriptN=true `]reset[/Button]
  [Button onClick:` scriptN = {history: 'undo'}; runScriptN=true `]undo[/Button]

  [PinchGraph width:400 height:200 generator:initFlexesN flexes:historyN /]
  History: [Display value:historyN /]
[/Aside]

[Flexagon width:500 height:300 numPats:patCountN initialScript:sidesN runInitial:runInitN history:historyN
  runScript:runScriptN script:scriptN options:drawOptions /]

[Unfolded width:1000 height:400 numPats:patCountN generator:initFlexesN autoLabel:true /]
