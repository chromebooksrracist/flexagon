[meta title:"New Flexes" description:"How to define flexes with pat notation" /]

[Header
  title:"New Flexes"
  subtitle:"How to define flexes with pat notation"
  author:"Scott Sherman"
  authorLink:"http://loki3.com/flex" /]


[Aside]
  [var name:'defaultColors' value:`[0x2E4172, 0x2B803E, 0xAA4439, 0x622870, 0xffff00, 0x553900, 0xdddddd, 0x999999]` /]
  [derived name:'initial' value:`[
    {searchFlexes: "ShSh'T1T1'FF'"},
    {flexAndColor: { flexes: 'T1*>Sh*>T2*>>Sh*^', colors:defaultColors }},
    ]` /]
  [Flexagon width:350 height:300 numPats:7 initialScript:initial options:`{structure:true, showIds:false}` /]
[/Aside]

Why can you apply a flex in one place and not another?
How does the flexagon simulator know where flexes can be performed?
How does it know how the flexagon changes when you do a flex?

Have you looked at the funny notation along the edges of the flexagon in the simulator and wondered what it means?
Perhaps you noticed that `-` is next to a triangle containing only a single leaf
and `[- -]` is next to a pair of leaves folded on top of each other.
But then you saw `[[[- [- -]] -] -]` and figured it was too complex to worry about.

Well, that notation describes the internal structure of the flexagon,
and it's exactly that structure that determines where you can do a particular flex.
Understanding how a flex changes that internal structure is key to understanding how a flex rearranges the leaves in a flexagon.


# Pat notation

* **Leaf**: Each individual polygon in an unfolded flexagon
* **Pat**: A stack of leaves in a folded flexagon

For example, a hexaflexagon consists of 6 pats, where each pat contains 1 or more leaves.
Every leaf is connected to exactly two leaves in a folded flexagon, and every pat is connected to exactly two adjacent pats.

* **Pat notation**: Notation used to describe how leaves are folded in a triangle flexagon, consisting of pairs of leaves and/or subpats

The flexagon simulator uses `-` to represent a generic leaf,
which is sufficient for understanding how the folds in a pat are nested.
But a more precise notation starts by uniquely labeling every leaf and using those labels, which helps when defining how flexes work.

So enough talk.
Let's see what this actually looks like.
Below are unfolded strips for all the different ways to fold a pat with 2, 3, or 4 leaves.

[Aside]
Cut out each of the strips and assemble them by folding the highest pair of numbers together,
then the next highest together and so on until you have a single pat.

Note that turning over the pats labeled 3, 4a, and 4c gives you a different nesting of leaves.
Thus there are actually 9 different leaf arrangements for pats with 1, 2, 3, or 4 leaves in them.
[/Aside]

2: [Unfolded width:250 height:100 options:`{end:1, rotation:60}`
  script:`[ {pats:[[1, 2], 100]}, {angles:[60,60]} ]` /]
3: [Unfolded width:300 height:100 options:`{end:2}`
  script:`[ {pats:[[1, [2, 3]], 100]}, {angles:[60,60]} ]` /]

[Float position:'right']
  4c: [Unfolded width:250 height:200 options:`{end:3, rotation:60}`
    script:`[ {pats:[[1, [[2, 3], 4]], 100]}, {angles:[60,60]} ]` /]
[/Float]

4a: [Unfolded width:300 height:100 options:`{end:3}`
  script:`[ {pats:[[[[1, 2], 3], 4], 100]}, {angles:[60,60]} ]` /]

4b: [Unfolded width:300 height:100 options:`{end:3}`
  script:`[ {pats:[[[1, 2], [3, 4]], 100]}, {angles:[60,60]} ]` /]

If you fold those sample pats and look at the results,
you'll note that the hinges between triangles can occur at any of the three edges.
But, it turns out that we don't have to model that detail in order to capture the important structure.
The important part is how the hinges are nested.

Here's what the nesting looks like: ... useful pictures ...

Pat notation groups leaves and subpats together by how they're nested.
A single leaf is `-`.
Two leaves folded together is `[- -]`.
If you fold a leaf and a 2-pat together, you either get `[- [- -]]` or `[[- -] -]`,
depending on the order of the two pieces.

When tracking how the internals of a flexagon change during a flex, we need to be able to track each leaf,
so we label every leaf with a unique id.
If our labels are numbers, one side can be positive and the flip side negative.
Thus we could describe 4a as `[[[3, -2], -4], 1]` or `[[[1, 2], 3], 4]`, depending on our choice of labels.

Using this, we can describe the 9 different ways to assemble pats with 4 or fewer leaves.

[Float position:'left']
* 1: `1`
* 3: `[[-2, 3], 1]`
* 4a: `[[[3, -2], -4], 1]`
* 4b: `[[3, -4], [1, -2]]`
* -4c: `[-4, [[-2, 1], 3]]`
[/Float]

[Float position:'right']
* 2: `[-2, 1]`
* -3: `[3, [1, -2]]`
* -4a: `[-4, [1, [3, -2]]]`
* 4c: `[[-2, [-4, 3]], 1]`
[/Float]
.

To describe an entire flexagon, you simply string together the descriptions of each pat, going clockwise around the flexagon.
So a 3-sided hexaflexagon might look like `[[1, 2], 3, [4, 5], 6, [7, 8], 9]`.

# Defining a flex

# Creating a new flex

[hr /]

# What next?

This only describes the pats in a *triangle* flexagon.
What about flexagons made from squares or other quadrilaterals?
What about pentagons, hexagons, etc.?

For additional information, see [loki3.com](http://loki3.com/flex/).

[FullWidth]
  [img src:'static/flexagon-variety.jpg' /]
[/FullWidth]
