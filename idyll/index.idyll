[meta title:"Flex Compendium" description:"Details about flexes on triangle flexagons" /]

[Header
  title:"Flex Compendium"
  subtitle:"Details about flexes on triangle flexagons"
  author:"Scott Sherman"
  authorLink:"http://loki3.com/flex" /]


This is a collection of flexes that work on triangle flexagons,
some of which also work on flexagons made up of squares, pentagons, etc.
It is not intended to be a complete list.

[Aside]
`F` : flip flex[br/]
`L3` : slot triple pocket flex[br/]
`Lh` : slot half flex[br/]
`Lk` : slot pocket[br/]
`Lbf` : slot tuck bottom front flex[br/]
`Lbb` : slot tuck bottom back flex[br/]
`Ltf` : slot tuck top front flex[br/]
`Ltb` : slot tuck top back flex[br/]
`P` : pinch flex[br/]
`P44`, `P333`, `P334`, `P55`, `P3333`, `P444`, `P66`: pinch variations[br/]
`Sh` : pyramid shuffle flex[br/]
`St` : silver tetra flex[br/]
`T` : tuck flex[br/]
`T1`, `T2`, `T3`...: tuck variations[br/]
`Tf` : forced tuck[br/]
`Tt` : tuck top flex[br/]
`Tk` : ticket flex[br/]
`Tw` : twist flex[br/]
`V` : v-flex[br/]
[/Aside]


# Flex Details

Each flex contains details about the flex, e.g. if it's *prime*, which flexagons it works on,
and the *pat notation* that describes how it changes the internal structure of the flexagon.
Here is more background on some of those details.

## Prime

This lists whether or not the flex is prime relative to the rest of the flexes on this page, excluding the *forced tuck*.

## Inverse

For most flexes `A`, `A' = ^A^`, i.e. doing the inverse is the same as turning it over, doing the flex, then turning it back over.
But for some flexes the before and after structures are different enough that this doesn't hold.
The simplest way to figure out if this is true, is to use the Flexagon Simulator in the [Flexagon Playground](playground.html).
Try the generating sequence `A*` then `A*^A*^`.
If they both create a flexagon with the same number of leaves, then `A' = ^A^`, otherwise `A' != ^A^`.

This is a useful detail to know when you're trying to explore all the states of a flexagon,
because you'll need to include a flex's inverse in the search if `A` is prime and `A' != ^A^`.

## Number of pats

A *pat* is a stack of leaves in a flexagon.
There are 6 pats in a hexaflexagon, 8 in an octaflexagon, etc.
Many flexes work on a range of flexagons, e.g. the *pyramid shuffle* works on any flexagon with 5 or more pats.

## Number of leaves

A *leaf* is one of the individual polygons in a flexagon.
Each flex will list the number of leaves in the *minimal flexagon*, i.e. the simplest flexagon that supports that flex.
It will be expressed as a function of the number of pats.
For example, the flip flex needs 4 more leaves than there are pats, described as *N + 4*.

## Special requirements

Some flexes may need something additional in order to work.
For example, the *silver tetra flex* works best on *right triangle flexagons*, and may not work on some flexagons.
More details on these requirements can be found on the [New Flexes](new-flexes.html) page under *More details*.


# Rotations

## Shift vertex

`<` and `>`

## Turn over

`^`

# Triangle flexes

## F: flip flex

[Slides width:320 height:240 pattern:'static/F/F*.jpg' start:1 end:16 /]

[Table data: `[
  {property: 'Prime?', value: "yes"},
  {property: 'Inverse', value: "F' = ^F^"},
  {property: 'Number of pats', value: "6 or more"},
  {property: 'Number of leaves', value: "N + 4"},
  {property: 'Special requirements', value: "only works with certain leaf angles"}
]`/]

## L3: slot triple pocket flex

[Slides width:320 height:240 pattern:'static/L3/*.jpg' start:1 end:37 /]

[Aside]
  TO DO: Does this flex generalize beyond the pentaflexagon?
[/Aside]

[Table data: `[
  {property: 'Prime?', value: "yes"},
  {property: 'Inverse', value: "L3' = ^L3^"},
  {property: 'Number of pats', value: "5"},
  {property: 'Number of leaves', value: "N + 9"},
  {property: 'Special requirements', value: "no"}
]`/]

Interestingly, `L3 = < St' > St' > St' <`, so you could say `L3` isn't prime.
But, since the pentaflexagon doesn't support the silver tetra, `L3` is prime in practice.

## Lh: slot half flex

[Slides width:426 height:240 pattern:'static/Lh/*.jpg' start:1 end:17 /]

[Aside]
  TO DO: Does this flex generalize beyond the hexaflexagon?
[/Aside]

[Table data: `[
  {property: 'Prime?', value: "no, Lh = Ltb T'"},
  {property: 'Inverse', value: "Lh' != ^Lh^"},
  {property: 'Number of pats', value: "6"},
  {property: 'Number of leaves', value: "N + 5"},
  {property: 'Special requirements', value: "no"}
]`/]

## Lk: slot pocket

[Slides width:426 height:240 pattern:'static/Lk/*.jpg' start:1 end:18 /]

[Table data: `[
  {property: 'Prime?', value: "no, Lk = Ltf > Sh"},
  {property: 'Inverse', value: "Lk' = ^Lk^"},
  {property: 'Number of pats', value: "5 or more"},
  {property: 'Number of leaves', value: "N + 6"},
  {property: 'Special requirements', value: "no"}
]`/]

## Lbf: slot tuck bottom front flex

[Slides width:426 height:240 pattern:'static/Lbf/*.jpg' start:1 end:18 /]

[Aside]
  TO DO: Does this flex generalize beyond the hexaflexagon?
[/Aside]

[Table data: `[
  {property: 'Prime?', value: "no, Lbf ~= V"},
  {property: 'Inverse', value: "Lbf' != ^Lbf^"},
  {property: 'Number of pats', value: "6"},
  {property: 'Number of leaves', value: "N + 4"},
  {property: 'Special requirements', value: "no"}
]`/]

## Lbb: slot tuck bottom back flex

[Slides width:426 height:240 pattern:'static/Lbb/*.jpg' start:1 end:21 /]

[Aside]
  TO DO: Does this flex generalize beyond the hexaflexagon?
[/Aside]

[Table data: `[
  {property: 'Prime?', value: "no, Lbb = Lbf < P' >"},
  {property: 'Inverse', value: "Lbb' != ^Lbb^"},
  {property: 'Number of pats', value: "6"},
  {property: 'Number of leaves', value: "N + 5"},
  {property: 'Special requirements', value: "no"}
]`/]

## Ltf: slot tuck top front flex

[Slides width:426 height:240 pattern:'static/Ltf/*.jpg' start:1 end:21 /]

[Table data: `[
  {property: 'Prime?', value: "yes"},
  {property: 'Inverse', value: "Ltf' = ^Ltf^"},
  {property: 'Number of pats', value: "5 or more"},
  {property: 'Number of leaves', value: "N + 4"},
  {property: 'Special requirements', value: "no"}
]`/]

## Ltb: slot tuck top back flex

[Slides width:426 height:240 pattern:'static/Ltb/*.jpg' start:1 end:20 /]

[Aside]
  TO DO: Does this flex generalize beyond the hexaflexagon?
[/Aside]

[Table data: `[
  {property: 'Prime?', value: "yes"},
  {property: 'Inverse', value: "Ltb' != ^Ltb^"},
  {property: 'Number of pats', value: "6"},
  {property: 'Number of leaves', value: "N + 4"},
  {property: 'Special requirements', value: "no"}
]`/]

## P: pinch flex

[img src:'static/pinch-flex.jpg' /]

[Table data: `[
  {property: 'Prime?', value: "yes"},
  {property: 'Inverse', value: "P' = ^P^"},
  {property: 'Number of pats', value: "even"},
  {property: 'Number of leaves', value: "N * 3 / 2"},
  {property: 'Special requirements', value: "yes"}
]`/]

## Pinch variations

[Table data: `[
  {property: 'Prime?', value: "no, P44 = T2 (>)4 T1 (>)4"},
  {property: 'Inverse', value: "P44' = ^P44^"},
  {property: 'Number of pats', value: "8"},
  {property: 'Number of leaves', value: "N + 4"},
  {property: 'Special requirements', value: "no"}
]`/]

[Table data: `[
  {property: 'Prime?', value: "no, P333 = T1 (>)3 T1 (>)3 T3 (>)3"},
  {property: 'Inverse', value: "P333' = ^P333^"},
  {property: 'Number of pats', value: "9"},
  {property: 'Number of leaves', value: "N + 6"},
  {property: 'Special requirements', value: "no"}
]`/]

[Slides width:320 height:240 pattern:'static/P3-3-4/*.jpg' start:1 end:13 /]

[Table data: `[
  {property: 'Prime?', value: "no, P334 = T1 (>)3 T1 (>)3 T1 (>)4"},
  {property: 'Inverse', value: "P334' = ^P334^"},
  {property: 'Number of pats', value: "10"},
  {property: 'Number of leaves', value: "N + 6"},
  {property: 'Special requirements', value: "no"}
]`/]

[Table data: `[
  {property: 'Prime?', value: "no, P55 = T3 (>)5 T2 (>)5"},
  {property: 'Inverse', value: "P55' = ^P55^"},
  {property: 'Number of pats', value: "10"},
  {property: 'Number of leaves', value: ""},
  {property: 'Special requirements', value: "no"}
]`/]

[Table data: `[
  {property: 'Prime?', value: "P3333 = T1 (>)3 T1 (>)3 T1 (>)3 T3 (>)3"},
  {property: 'Inverse', value: "P3333' = ^P3333^"},
  {property: 'Number of pats', value: "12"},
  {property: 'Number of leaves', value: "N + 8"},
  {property: 'Special requirements', value: "no"}
]`/]

[Slides width:320 height:240 pattern:'static/P4-4-4/*.jpg' start:1 end:13 /]

[Table data: `[
  {property: 'Prime?', value: "no, P444 = T2 (>)4 T2 (>)4 T1 (>)4"},
  {property: 'Inverse', value: "P444' = ^P444^"},
  {property: 'Number of pats', value: "12"},
  {property: 'Number of leaves', value: "N + 6"},
  {property: 'Special requirements', value: "no"}
]`/]

[Table data: `[
  {property: 'Prime?', value: "no, P66 = T4 (>)6 T3 (>)6"},
  {property: 'Inverse', value: "P66' = ^P66^"},
  {property: 'Number of pats', value: "12"},
  {property: 'Number of leaves', value: "N + 4"},
  {property: 'Special requirements', value: "no"}
]`/]

## Sh: pyramid shuffle flex

[Slides width:320 height:240 pattern:'static/Sh/Sh*.jpg' start:1 end:17 /]

[Table data: `[
  {property: 'Prime?', value: "yes"},
  {property: 'Inverse', value: "Sh' = ^Sh^"},
  {property: 'Number of pats', value: "5 or more"},
  {property: 'Number of leaves', value: "N + 4"},
  {property: 'Special requirements', value: "no"}
]`/]

## St: silver tetra flex

[Slides width:320 height:240 pattern:'static/St/St*.jpg' start:1 end:15 /]

[Table data: `[
  {property: 'Prime?', value: "no, St = "},
  {property: 'Inverse', value: "St' = ^St^"},
  {property: 'Number of pats', value: "4 or more"},
  {property: 'Number of leaves', value: "N + 4"},
  {property: 'Special requirements', value: "only works with certain leaf angles"}
]`/]

## T: tuck flex

[Slides width:320 height:240 pattern:'static/T/T*.jpg' start:1 end:14 /]

[Table data: `[
  {property: 'Prime?', value: "yes"},
  {property: 'Inverse', value: "T' ~= ^T^"},
  {property: 'Number of pats', value: "6 or more"},
  {property: 'Number of leaves', value: "N + 3"},
  {property: 'Special requirements', value: "additional needed structure"}
]`/]

T1, T2...

## Tf: forced tuck

[Table data: `[
  {property: 'Prime?', value: "yes"},
  {property: 'Inverse', value: "Tf' = ^Tf^"},
  {property: 'Number of pats', value: "6 or more"},
  {property: 'Number of leaves', value: "N + 2"},
  {property: 'Special requirements', value: "no"}
]`/]

## Tt: tuck top flex

[Aside]
  TO DO: Does this flex generalize beyond the hexaflexagon?
[/Aside]

[Table data: `[
  {property: 'Prime?', value: "no, Tt = T > P <"},
  {property: 'Inverse', value: "Tt' != ^Tt'^"},
  {property: 'Number of pats', value: "6"},
  {property: 'Number of leaves', value: "N + 4"},
  {property: 'Special requirements', value: "additional needed structure"}
]`/]

## Tk: ticket flex

[Aside]
  TO DO: Does this flex generalize beyond the hexaflexagon?
[/Aside]

[Table data: `[
  {property: 'Prime?', value: "no, Tk = Ltb' T << V ^"},
  {property: 'Inverse', value: "Tk' != ^Tk^"},
  {property: 'Number of pats', value: "6"},
  {property: 'Number of leaves', value: "N + 5"},
  {property: 'Special requirements', value: "no"}
]`/]

## Tw: twist flex

[Aside]
  TO DO: Does this flex work on a star hexaflexagon?
[/Aside]

[Table data: `[
  {property: 'Prime?', value: "yes"},
  {property: 'Inverse', value: "Tw' = ^Tw^"},
  {property: 'Number of pats', value: "8 or more, even"},
  {property: 'Number of leaves', value: "N + N/2"},
  {property: 'Special requirements', value: "only works with certain leaf angles"}
]`/]

## V: v-flex

[Slides width:320 height:240 pattern:'static/V/V*.jpg' start:1 end:13 /]

[Aside]
  TO DO: Does this flex generalize beyond the hexaflexagon?
[/Aside]

[Table data: `[
  {property: 'Prime?', value: "yes"},
  {property: 'Inverse', value: "V' = ^V^"},
  {property: 'Number of pats', value: "6"},
  {property: 'Number of leaves', value: "N + 3"},
  {property: 'Special requirements', value: "no"}
]`/]
