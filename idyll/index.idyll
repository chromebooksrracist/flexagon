[meta title:"Generating sequences" description:"Creating flexagons with flex sequences" /]

[Header
  title:"Generating sequences"
  subtitle:"Creating flexagons with flex sequences"
  author:"Scott Sherman"
  authorLink:"http://loki3.com/flex" /]

[var name:'flexagonOptions' value:`{structure:true, showIds:false, both:true}`/]
[var name:'unfoldedOptions' value:`{content:1, captions: [{ text: '*', which: 0 }, { text: '*', which: -1 }]}`/]


The [first chapter](pinch-flex.html) introduced flexagons and the pinch flex,
describing how to use the Tuckerman Traverse to explore every side.
The [second chapter](flexing.html) showed a variety of flexes and flexagons,
demonstrating that there isn't always a concept of well-defined "sides" on a flexagon.

A *generating sequence* is a sequence of flexes used to create the internal structure of a flexagon.
This chapter will show how you can use generating sequences to custom design flexagons.


# Flex notation

Recall the *flex notation* that has been used to describe a series of flexes relative to the *current vertex*.
Here's what we've defined so far:

* `>` : shift the current vertex one vertex clockwise
* `<` : shift the current vertex one vertex counterclockwise
* `^` : turn the flexagon over, keeping the same current vertex
* `F` : perform a flip flex
* `P` : perform a pinch flex
* `Sh` : perform a pyramid shuffle
* `St` : perform a silver tetra flex
* `T` : perform a tuck flex
* `V` : perform a v-flex

Additionally, you can add a `'` after a flex symbol to indicate that the flex should be done in reverse, e.g. `P'` or `Sh'`.
These symbols can be strung together to describe a series of flexes, e.g. `P>>T'^<Sh`.


# Generating structure

[Aside]
    [Flexagon width:170 height:170 numPats:6 options:`{showIds: false}` /]
[/Aside]

When the previous chapter showed the *minimal flexagon* for a given flex,
it was using a simple *generating sequence* in order to create the flexagon.

Consider starting with a hexagon.
You can think of this as a degenerate flexagon, one that can't be flexed at all.
What's the minimal amount of structure necessary to add to allow you to perform a pinch flex?

The answer is that every other *pat* (i.e. stack of triangles in the folded flexagon) needs to have exactly two leaves in it.
This gives you the 9-triangle straight strip that folds into the 3-sided hexaflexagon.

[Unfolded width:800 height:150 numPats:6 generator:'P+' autoLabel:true /]

You can express the concept of creating exactly the structure necessary to perform a flex
by adding either a `*` or `+` to a flex symbol.
`*` means that you add the structure and perform the flex,
while `+` means that you add the structure without performing the flex.
Thus, the 3-sided hexaflexagon has a generating sequence of `P*` or `P+`.
The difference isn't important when it's just a single flex, but it becomes more important when there are a series of flexes.

So let's look again at the minimal hexaflexagon for various flexes.
Pick a button to see the folded flexagon with its structure (represented by `-`, `[- -]`, `[[- -] -]`, etc.)
followed by the unfolded strip.

[var name:'generator' value:'>' /]
[derived name:'initial' value:`[
  {searchFlexes:"F F' P Sh Sh' St St' T T' V V'"},
  {flexes: generator}
  ]` /]
[var name:'runInitial' value:false /]

[Button onClick:` generator='F+'; runInitial=true; `]F+[/Button],
[Button onClick:` generator='P+'; runInitial=true; `]P+[/Button],
[Button onClick:` generator='Sh+'; runInitial=true; `]Sh+[/Button],
[Button onClick:` generator='St+'; runInitial=true; `]St+[/Button],
[Button onClick:` generator='T+'; runInitial=true; `]T+[/Button],
[Button onClick:` generator='V+'; runInitial=true; `]V+[/Button].

[Flexagon width:600 height:360 numPats:6 initialScript:initial runInitial:runInitial options:flexagonOptions overButton:true /]

[Unfolded width:1000 height:500 numPats:6 generator:generator options:unfoldedOptions /]
