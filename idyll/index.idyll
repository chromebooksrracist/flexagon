[meta title:"Flex Compendium" description:"Details about flexes on triangle flexagons" /]

[Header
  title:"Flex Compendium"
  subtitle:"Details about flexes on triangle flexagons"
  author:"Scott Sherman"
  authorLink:"http://loki3.com/flex" /]


[Aside]
### Flexes:

[link text:'> < ^: rotations' url:'#Rotations' /][br/]
[link text:'F: flip flex' url:'#F' /][br/]
[link text:'Sh : pyramid shuffle flex' url:'#Sh' /][br/]
[link text:'St : silver tetra flex' url:'#St' /][br/]
[link text:'Tk : ticket flex' url:'#Tk' /][br/]
[link text:'Tw : twist flex' url:'#Tw' /][br/]
[link text:'V : v-flex' url:'#V' /][br/]
[br/]
pinch flexes:
* [link text:'P : pinch flex' url:'#P' /][br/]
* [link text:'P44' url:'#P44' /], [link text:'P55' url:'#P55' /], [link text:'P66' url:'#P66' /]
* [link text:'P333' url:'#P333' /], [link text:'P334' url:'#P334' /], [link text:'P444' url:'#P444' /]
* [link text:'P3333' url:'#P3333' /]
slot flexes:
* [link text:'L3 : slot triple pocket flex' url:'#L3' /][br/]
* [link text:'Lh : slot half flex' url:'#Lh' /][br/]
* [link text:'Lk : slot pocket' url:'#Lk' /][br/]
* [link text:'Lbf : slot tuck bottom front flex' url:'#Lbf' /][br/]
* [link text:'Lbb : slot tuck bottom back flex' url:'#Lbb' /][br/]
* [link text:'Ltf : slot tuck top front flex' url:'#Ltf' /][br/]
* [link text:'Ltb : slot tuck top back flex' url:'#Ltb' /][br/]
tuck flexes:
* [link text:'T, T1, T2... : tuck flex' url:'#T' /][br/]
* [link text:'Tf : forced tuck' url:'#Tf' /][br/]
* [link text:'Tt : tuck top flex' url:'#Tt' /][br/]
[/Aside]

This is a collection of flexes that work on triangle flexagons,
some of which also work on flexagons made up of squares, pentagons, etc.
It is not intended to be a complete list.


# Flex Details

Each flex contains details about the flex, e.g. if it's *prime*, which flexagons it works on,
and the *pat notation* that describes how it changes the internal structure of the flexagon.
Here is more background on some of those details.

## Prime

This lists whether or not the flex is prime relative to the rest of the flexes on this page, excluding the [a href:'#Tf']*forced tuck*[/a].

## Inverse

For most flexes `A`, the following equality is true: `A' = ^A^`,
i.e. doing the inverse is the same as turning it over, doing the flex, then turning it back over.
But for some flexes the before and after structures are different enough that this doesn't hold.
The simplest way to figure out if this is true, is to use the Flexagon Simulator in the [Flexagon Playground](playground.html).
First try the generating sequence `A*`.
Then compare that to the flexagon you get from the generating seuqence `A*^A*^`.
If they both create a flexagon with the same number of leaves, then `A' = ^A^`, otherwise `A' != ^A^`.

This is a useful detail to know when you're trying to explore all the states of a flexagon,
because you'll need to include a flex's inverse in the search if `A` is prime and `A' != ^A^`.

## Number of pats

A *pat* is a stack of leaves in a flexagon.
There are 6 pats in a hexaflexagon, 8 in an octaflexagon, etc.
Many flexes work on a range of flexagons, e.g. the *pyramid shuffle* works on any flexagon with 5 or more pats.

## Number of leaves

A *leaf* is one of the individual polygons in a flexagon.
Each flex will list the number of leaves in the *minimal flexagon*, i.e. the simplest flexagon that supports that flex.
It will be expressed as a function of the number of pats.
For example, the flip flex needs 4 more leaves than there are pats, described as *N + 4*.

## Special requirements

Some flexes may need something additional in order to work.
For example, the *silver tetra flex* works best on *right triangle flexagons*, and may not work on some flexagons.
More details on these requirements can be found on the [New Flexes](new-flexes.html) page under *More details*.


[a name:'Rotations'/]
# Rotations

*Rotations* simply change the *current vertex*, i.e. the vertex where the next flex starts.

* `<`: Shift the current vertex one step counterclockwise (to the left if the current vertex is at the top)
* `>`: Shift the current vertex one step clockwise (to the right if the current vertex is at the top)
* '^': Turn over the flexagon, keep the same current vertex


# Triangle flexes

[hr/]
[a name:'F'/]
[h2 className:"flex"]F: flip flex[/h2]

[Aside]
  [Slides width:320 height:240 pattern:'static/F/F*.jpg' start:1 end:16 /]
[/Aside]

[Table data: `[
  {property: 'Prime?', value: "yes"},
  {property: 'Inverse', value: "F' = ^F^"},
  {property: 'Number of pats', value: "6 or more"},
  {property: 'Number of leaves', value: "N + 4"},
  {property: 'Special requirements', value: "only works with certain leaf angles"}
]`/][br/]

[Sampler generator:'F+' patType:7 patOptions:`['6R', 7, 8, '8R', 9, 10, '10R', 11, 12, '12R']` /]


[hr/]
[a name:'L3'/]
[h2 className:"flex"]L3: slot triple pocket flex[/h2]

[Aside]
  [Slides width:320 height:240 pattern:'static/L3/*.jpg' start:1 end:37 /]

  TO DO: Does this flex generalize beyond the pentaflexagon?
[/Aside]

[Table data: `[
  {property: 'Prime?', value: "yes"},
  {property: 'Inverse', value: "L3' = ^L3^"},
  {property: 'Number of pats', value: "5"},
  {property: 'Number of leaves', value: "N + 9"},
  {property: 'Special requirements', value: "no"}
]`/][br/]

[Sampler generator:'L3+' patType:5 patOptions:`[5]` /]


[hr/]
[a name:'Lh'/]
[h2 className:"flex"]Lh: slot half flex[/h2]

[Aside]
  [Slides width:426 height:240 pattern:'static/Lh/*.jpg' start:1 end:17 /]

  TO DO: Does this flex generalize beyond the hexaflexagon?
[/Aside]

[Table data: `[
  {property: 'Prime?', value: "no, Lh = Ltb T'"},
  {property: 'Inverse', value: "Lh' != ^Lh^"},
  {property: 'Number of pats', value: "6"},
  {property: 'Number of leaves', value: "N + 5"},
  {property: 'Special requirements', value: "no"}
]`/][br/]

[Sampler generator:'Lh+' patType:6 patOptions:`[6]` /]


[hr/]
[a name:'Lk'/]
[h2 className:"flex"]Lk: slot pocket[/h2]

[Aside]
  [Slides width:426 height:240 pattern:'static/Lk/*.jpg' start:1 end:18 /]
[/Aside]

[Table data: `[
  {property: 'Prime?', value: "no, Lk = Ltf > Sh"},
  {property: 'Inverse', value: "Lk' = ^Lk^"},
  {property: 'Number of pats', value: "5 or more"},
  {property: 'Number of leaves', value: "N + 6"},
  {property: 'Special requirements', value: "no"}
]`/][br/]

[Sampler generator:'Lk+' patType:5 patOptions:`[5, 6, 7, 8, 9, 10, 11, 12]` /]


[hr/]
[a name:'Lbf'/]
[h2 className:"flex"]Lbf: slot tuck bottom front flex[/h2]

[Aside]
  [Slides width:426 height:240 pattern:'static/Lbf/*.jpg' start:1 end:18 /]

  TO DO: Does this flex generalize beyond the hexaflexagon?
[/Aside]

[Table data: `[
  {property: 'Prime?', value: "no, Lbf ~= V"},
  {property: 'Inverse', value: "Lbf' != ^Lbf^"},
  {property: 'Number of pats', value: "6"},
  {property: 'Number of leaves', value: "N + 4"},
  {property: 'Special requirements', value: "no"}
]`/][br/]

[Sampler generator:'Lbf+' patType:6 patOptions:`[6]` /]


[hr/]
[a name:'Lbb'/]
[h2 className:"flex"]Lbb: slot tuck bottom back flex[/h2]

[Aside]
  [Slides width:426 height:240 pattern:'static/Lbb/*.jpg' start:1 end:21 /]

  TO DO: Does this flex generalize beyond the hexaflexagon?
[/Aside]

[Table data: `[
  {property: 'Prime?', value: "no, Lbb = Lbf < P' >"},
  {property: 'Inverse', value: "Lbb' != ^Lbb^"},
  {property: 'Number of pats', value: "6"},
  {property: 'Number of leaves', value: "N + 5"},
  {property: 'Special requirements', value: "no"}
]`/][br/]

[Sampler generator:'Lbb+' patType:6 patOptions:`[6]` /]


[hr/]
[a name:'Ltf'/]
[h2 className:"flex"]Ltf: slot tuck top front flex[/h2]

[Aside]
  [Slides width:426 height:240 pattern:'static/Ltf/*.jpg' start:1 end:21 /]
[/Aside]

[Table data: `[
  {property: 'Prime?', value: "yes"},
  {property: 'Inverse', value: "Ltf' = ^Ltf^"},
  {property: 'Number of pats', value: "5 or more"},
  {property: 'Number of leaves', value: "N + 4"},
  {property: 'Special requirements', value: "no"}
]`/][br/]

[Sampler generator:'Ltf+' patType:5 patOptions:`[5, 6, 7, 8, 9, 10, 11, 12]` /]


[hr/]
[a name:'Ltb'/]
[h2 className:"flex"]Ltb: slot tuck top back flex[/h2]

[Aside]
  [Slides width:426 height:240 pattern:'static/Ltb/*.jpg' start:1 end:20 /]

  TO DO: Does this flex generalize beyond the hexaflexagon?
[/Aside]

[Table data: `[
  {property: 'Prime?', value: "yes"},
  {property: 'Inverse', value: "Ltb' != ^Ltb^"},
  {property: 'Number of pats', value: "6"},
  {property: 'Number of leaves', value: "N + 4"},
  {property: 'Special requirements', value: "no"}
]`/][br/]

[Sampler generator:'Ltb+' patType:6 patOptions:`[6]` /]


[hr/]
[a name:'P'/]
[h2 className:"flex"]P: pinch flex[/h2]

[Aside]
  [img src:'static/pinch-flex.jpg' /]
[/Aside]

[Table data: `[
  {property: 'Prime?', value: "yes"},
  {property: 'Inverse', value: "P' = ^P^"},
  {property: 'Number of pats', value: "even"},
  {property: 'Number of leaves', value: "N * 3 / 2"},
  {property: 'Special requirements', value: "yes"}
]`/][br/]

[Sampler generator:'P+' patType:6 patOptions:`[6, '6r', 8, '8r', 10, '10r', 12, '12r']` /]


[hr/]
[a name:'P44'/]
[h2 className:"flex"]P44: pinch 44[/h2]

[Table data: `[
  {property: 'Prime?', value: "no, P44 = T2 (>)4 T1 (>)4"},
  {property: 'Inverse', value: "P44' = ^P44^"},
  {property: 'Number of pats', value: "8"},
  {property: 'Number of leaves', value: "N + 4"},
  {property: 'Special requirements', value: "no"}
]`/][br/]

[Sampler generator:'P44+' patType:8 patOptions:`[8]` /]


[hr/]
[a name:'P333'/]
[h2 className:"flex"]P333: pinch 333[/h2]

[Table data: `[
  {property: 'Prime?', value: "no, P333 = T1 (>)3 T1 (>)3 T3 (>)3"},
  {property: 'Inverse', value: "P333' = ^P333^"},
  {property: 'Number of pats', value: "9"},
  {property: 'Number of leaves', value: "N + 6"},
  {property: 'Special requirements', value: "no"}
]`/][br/]

[Sampler generator:'P333+' patType:9 patOptions:`[9]` /]


[hr/]
[a name:'P334'/]
[h2 className:"flex"]P334: pinch 334[/h2]

[Aside]
  [Slides width:320 height:240 pattern:'static/P3-3-4/*.jpg' start:1 end:13 /]
[/Aside]

[Table data: `[
  {property: 'Prime?', value: "no, P334 = T1 (>)3 T1 (>)3 T1 (>)4"},
  {property: 'Inverse', value: "P334' = ^P334^"},
  {property: 'Number of pats', value: "10"},
  {property: 'Number of leaves', value: "N + 6"},
  {property: 'Special requirements', value: "no"}
]`/][br/]

[Sampler generator:'P334+' patType:10 patOptions:`[10]` /]


[hr/]
[a name:'P55'/]
[h2 className:"flex"]P55: pinch 55[/h2]

[Table data: `[
  {property: 'Prime?', value: "no, P55 = T3 (>)5 T2 (>)5"},
  {property: 'Inverse', value: "P55' = ^P55^"},
  {property: 'Number of pats', value: "10"},
  {property: 'Number of leaves', value: ""},
  {property: 'Special requirements', value: "no"}
]`/][br/]

[Sampler generator:'P55+' patType:10 patOptions:`[10]` /]


[hr/]
[a name:'P3333'/]
[h2 className:"flex"]P3333: pinch 3333[/h2]

[Table data: `[
  {property: 'Prime?', value: "P3333 = T1 (>)3 T1 (>)3 T1 (>)3 T3 (>)3"},
  {property: 'Inverse', value: "P3333' = ^P3333^"},
  {property: 'Number of pats', value: "12"},
  {property: 'Number of leaves', value: "N + 8"},
  {property: 'Special requirements', value: "no"}
]`/][br/]

[Sampler generator:'P3333+' patType:12 patOptions:`[12]` /]


[hr/]
[a name:'P444'/]
[h2 className:"flex"]P444: pinch 444[/h2]

[Aside]
  [Slides width:320 height:240 pattern:'static/P4-4-4/*.jpg' start:1 end:13 /]
[/Aside]

[Table data: `[
  {property: 'Prime?', value: "no, P444 = T2 (>)4 T2 (>)4 T1 (>)4"},
  {property: 'Inverse', value: "P444' = ^P444^"},
  {property: 'Number of pats', value: "12"},
  {property: 'Number of leaves', value: "N + 6"},
  {property: 'Special requirements', value: "no"}
]`/][br/]

[Sampler generator:'P444+' patType:12 patOptions:`[12]` /]


[hr/]
[a name:'P66'/]
[h2 className:"flex"]P66: pinch 66[/h2]

[Table data: `[
  {property: 'Prime?', value: "no, P66 = T4 (>)6 T3 (>)6"},
  {property: 'Inverse', value: "P66' = ^P66^"},
  {property: 'Number of pats', value: "12"},
  {property: 'Number of leaves', value: "N + 4"},
  {property: 'Special requirements', value: "no"}
]`/][br/]

[Sampler generator:'P66+' patType:12 patOptions:`[12]` /]


[hr/]
[a name:'Sh'/]
[h2 className:"flex"]Sh: pyramid shuffle flex[/h2]

[Aside]
  [Slides width:320 height:240 pattern:'static/Sh/Sh*.jpg' start:1 end:17 /]
[/Aside]

[Table data: `[
  {property: 'Prime?', value: "yes"},
  {property: 'Inverse', value: "Sh' = ^Sh^"},
  {property: 'Number of pats', value: "5 or more"},
  {property: 'Number of leaves', value: "N + 4"},
  {property: 'Special requirements', value: "no"}
]`/][br/]

[Sampler generator:'Sh+' patType:6 patOptions:`[5, 6, '6r', '6R', 7, 8, '8r', '8R', 9, 10, '10r', '10R', 11, 12, '12r', '12R']` /]


[hr/]
[a name:'St'/]
[h2 className:"flex"]St: silver tetra flex[/h2]

[Aside]
  [Slides width:320 height:240 pattern:'static/St/St*.jpg' start:1 end:15 /]

  TO DO: does this work with both variations #1 and #2?
  [br/]Document the variations
[/Aside]

[Table data: `[
  {property: 'Prime?', value: "no, St = > T' <<^ T <^"},
  {property: 'Inverse', value: "St' = ^St^"},
  {property: 'Number of pats', value: "4 or more"},
  {property: 'Number of leaves', value: "N + 4"},
  {property: 'Special requirements', value: "only works with certain leaf angles"}
]`/][br/]

[Sampler generator:'St+' patType:'8R' patOptions:`['6R', '8R', 9, 10, '10R', 11, 12, '12R']` /]


[hr/]
[a name:'T'/]
[h2 className:"flex"]T: tuck flex[/h2]

[Aside]
  [Slides width:320 height:240 pattern:'static/T/T*.jpg' start:1 end:14 /]

  TO DO: fix generating sequence for hexa
  [br/]TO DO: explain T1, etc.
[/Aside]

[Table data: `[
  {property: 'Prime?', value: "yes"},
  {property: 'Inverse', value: "T' ~= ^T^"},
  {property: 'Number of pats', value: "6 or more"},
  {property: 'Number of leaves', value: "N + 3"},
  {property: 'Special requirements', value: "additional needed structure"}
]`/][br/]

T1, T2...

[Sampler generator:'T1+' patType:7 patOptions:`[6, '6r', '6R', 7, 8, '8r', '8R', 9, 10, '10r', '10R', 11, 12, '12r', '12R']` /]


[hr/]
[a name:'Tf'/]
[h2 className:"flex"]Tf: forced tuck[/h2]

[Table data: `[
  {property: 'Prime?', value: "yes"},
  {property: 'Inverse', value: "Tf' = ^Tf^"},
  {property: 'Number of pats', value: "6 or more"},
  {property: 'Number of leaves', value: "N + 2"},
  {property: 'Special requirements', value: "no"}
]`/][br/]

[Sampler generator:'Tf+' patType:6 patOptions:`[6, '6r', '6R', 7, 8, '8r', '8R', 9, 10, '10r', '10R', 11, 12, '12r', '12R']` /]


[hr/]
[a name:'Tt'/]
[h2 className:"flex"]Tt: tuck top flex[/h2]

[Aside]
  TO DO: Does this flex generalize beyond the hexaflexagon?
[/Aside]

[Table data: `[
  {property: 'Prime?', value: "no, Tt = T > P <"},
  {property: 'Inverse', value: "Tt' != ^Tt'^"},
  {property: 'Number of pats', value: "6"},
  {property: 'Number of leaves', value: "N + 4"},
  {property: 'Special requirements', value: "additional needed structure"}
]`/][br/]

[Sampler generator:'Tt+' patType:6 patOptions:`[6]` /]


[hr/]
[a name:'Tk'/]
[h2 className:"flex"]Tk: ticket flex[/h2]

[Aside]
  TO DO: Does this flex generalize beyond the hexaflexagon?
[/Aside]

[Table data: `[
  {property: 'Prime?', value: "no, Tk = Ltb' T << V ^"},
  {property: 'Inverse', value: "Tk' != ^Tk^"},
  {property: 'Number of pats', value: "6"},
  {property: 'Number of leaves', value: "N + 5"},
  {property: 'Special requirements', value: "no"}
]`/][br/]

[Sampler generator:'Tk+' patType:6 patOptions:`[6]` /]


[hr/]
[a name:'Tw'/]
[h2 className:"flex"]Tw: twist flex[/h2]

[Aside]
  TO DO: Does this flex work on a star hexaflexagon?
[/Aside]

[Table data: `[
  {property: 'Prime?', value: "yes"},
  {property: 'Inverse', value: "Tw' = ^Tw^"},
  {property: 'Number of pats', value: "8 or more, even"},
  {property: 'Number of leaves', value: "N + N/2"},
  {property: 'Special requirements', value: "only works with certain leaf angles"}
]`/][br/]

[Sampler generator:'Tw+' patType:'8R' patOptions:`['8R', '10S', '12S']` /]


[hr/]
[a name:'V'/]
[h2 className:"flex"]V: v-flex[/h2]

[Aside]
  [Slides width:320 height:240 pattern:'static/V/V*.jpg' start:1 end:13 /]

  TO DO: Does this flex generalize beyond the hexaflexagon?
[/Aside]

[Table data: `[
  {property: 'Prime?', value: "yes"},
  {property: 'Inverse', value: "V' = ^V^"},
  {property: 'Number of pats', value: "6"},
  {property: 'Number of leaves', value: "N + 3"},
  {property: 'Special requirements', value: "no"}
]`/][br/]

[Sampler generator:'V+' patType:6 patOptions:`[6]` /]
