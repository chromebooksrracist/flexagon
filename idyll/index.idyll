[meta title:"Flexes" description:"Various flexagon flexes" /]

[Header
  title:"Flexing"
  subtitle:"Various flexagon flexes"
  author:"Scott Sherman"
  authorLink:"http://loki3.com/flex" /]

[var name:'flexagonOptions' value:`{structure:true, showIds:false, both:true}`/]
[var name:'unfoldedOptions' value:`{content:1, captions: [{ text: '*', which: 0 }, { text: '*', which: -1 }]}`/]

The previous explorable showed how to use the pinch flex to explore a flexagon.
But it turns out that there a lots of other ways to flex a flexagon, all of which rearrange the leaves in unexpected ways.
We'll cover flexes like the *tuck flex*, *pyramid shuffle*, and *v-flex*.

The best way to learn new flexes is on the *minimal flexagon* that supports the flex.
This means that the flexagon has exactly the minimum structure necessary to perform the flex.
On this page you'll find a variety of flexes, and the option of trying out the minimal flexagon with a variety of flexagons.

For flexagon names, Greek prefixes are used to reflect the number of leaves per side, e.g. *hexaflexagon* for 6 triangles per side.
Names are often proceeded by a word that describes the shape of the triangle, e.g. *right* for a right triangle.

[Aside]
  The original naming reflected this approach, e.g. *hexaflexagon* for 6 triangles and *tetraflexagon* for 4 squares.
  But you'll also occasionally see the prefix used to describe the *polygon* used in the flexagon,
  e.g. *pentaflexagon* to indicate that the leaves are *pentagons*.
  My preference is to use *pentaflexagon* to mean 5 leaves per face and *pentagon flexagon* to mean pentagonal leaves.
[/Aside]

[Float position:'left']
* 4: tetraflexagon
* 5: pentaflexagon
* 6: hexaflexagon
* 7: heptaflexagon
* 8: octaflexagon
* 9: enneaflexagon
* 10: decaflexagon
* 12: dodecaflexagon
[/Float]

[Float position:'right']
* equilateral: all sides equal
* silver: 45-45-90 triangle
* bronze: 30-60-90 triangle
* right: one angle is 90 degrees
* isosceles: two sides are equal (the default)

[br /][br /][br /]
[/Float]

# Pyramid shuffle

Step through the images to see the pyramid shuffle on an equilateral hexaflexagon:

[Aside]
  The *pyramid shuffle* requires at least 5 leaves per side (i.e. a pentaflexagon).
  It requires mild bending of the leaves on the pentaflexagon,
  but no bending for most other flexagons.
[/Aside]

[Slides width:320 height:240 pattern:'static/Sh/Sh*.jpg' start:1 end:17 /]
// Video shows pyramid shuffle on an equilateral hexaflexagon and a pentaflexagon:
// [Youtube id:"F5cj3LL8pqE" width:500 height:300 options:`{ start:89, end:117, rel:0, modestbranding:1 }` /]

[var name:'flexShuffle' value:'Sh+' /]
[var name:'patsShuffle' value:6 /]
[var name:'anglesShuffle' value:`undefined` /]
[derived name:'initShuffle' value:`[
  {angles:anglesShuffle},
  {searchFlexes:"Sh Sh'"},
  {flexes: flexShuffle},
  {reverseFlexes: flexShuffle}
  ]` /]
[var name:'runInitShuffle' value:false /]

Here are some flexagons you can use to try the pyramid shuffle:
[Button onClick:` patsShuffle=5; anglesShuffle=undefined; runInitShuffle=true; `]pentaflexagon[/Button],
[Button onClick:` patsShuffle=6; anglesShuffle=undefined; runInitShuffle=true; `]equilateral hexaflexagon[/Button],
[Button onClick:` patsShuffle=6; anglesShuffle=[60,30]; runInitShuffle=true; `]bronze hexaflexagon #1[/Button],
[Button onClick:` patsShuffle=6; anglesShuffle=[60,90]; runInitShuffle=true; `]bronze hexaflexagon #2[/Button],
[Button onClick:` patsShuffle=7; anglesShuffle=undefined; runInitShuffle=true; `]heptaflexagon[/Button],
[Button onClick:` patsShuffle=8; anglesShuffle=undefined; runInitShuffle=true; `]isosceles octaflexagon[/Button],
[Button onClick:` patsShuffle=8; anglesShuffle=[45,90]; runInitShuffle=true; `]silver octaflexagon #1[/Button],
[Button onClick:` patsShuffle=8; anglesShuffle=[45,45]; runInitShuffle=true; `]silver octaflexagon #2[/Button],
[Button onClick:` patsShuffle=10; anglesShuffle=undefined; runInitShuffle=true; `]isosceles decaflexagon[/Button],
[Button onClick:` patsShuffle=10; anglesShuffle=[36, 54]; runInitShuffle=true; `]right decaflexagon[/Button],
[Button onClick:` patsShuffle=12; anglesShuffle=undefined; runInitShuffle=true; `]isosceles dodecaflexagon[/Button],
[Button onClick:` patsShuffle=12; anglesShuffle=[30, 60]; runInitShuffle=true; `]right dodecaflexagon[/Button], or
[Button onClick:` patsShuffle=12; anglesShuffle=[30, 30]; runInitShuffle=true; `]star dodecaflexagon[/Button].

[Aside]
  Every leaf (triangle) is labled with a unique id.
  The backside of a leaf is the same as the front, only negative (e.g. 1 and -1).
  The flexagon to the left shows you where the labels should be after folding, both on the front (the large flexagon) and the back (the small flexagon).
  If you click the `Sh` button, you can see what the labels will look like after a successful pyramid shuffle.
[/Aside]

[Flexagon width:600 height:400 numPats:patsShuffle initialScript:initShuffle runInitial:runInitShuffle options:flexagonOptions /]

[var name:"showFoldingHelp" value:false /]
[Button onClick:` showFoldingHelp = !showFoldingHelp `]How do I fold this?[/Button]
[Conditional if:` showFoldingHelp `]
  These instructions apply to all the triangle strips on this page.

  **Cut:**
  Start by printing out the strip and cutting along the outside edges.

  **Prefold:**
  After you've cut out the shape, fold and unfold along every dashed line to prepare it.
  Note that the first and last triangle in the strip have dashed lines to indicate where to tape the edges everything is folded.

  **Number:**
  The large number on each triangle represents the number on the *front* of the triangle, while the smaller number next to it represents the number on the *back*.
  Copy the smaller number in the center of each triangle onto its backside.
  The small numbers in the corners represent the leaf's unique id, which corresponds to what's showing in the flexagon simulator above.

  **Fold:**
  Find the largest pairs of adjacent numbers and fold those numbers together.
  Then find the next largest pairs of adjacent numbers and fold them together.
  Continue in this way until the only numbers still visible are the 1's and the 2's.

  **Tape:**
  You should now have a polygon consisting of the appropriate number of triangles, e.g. 6 for a hexaflexagon, 7 for a heptaflexagon, etc.
  Tape the edges of the first and last triangles together to complete the flexagon.

  **Flex:**
  The *'s on the first and last leaves correspond to the * in the flexagon simulator above, which represents the *current vertex*.
  This is where the flex should be performed from.
[/Conditional]

[Unfolded width:1000 height:500 numPats:patsShuffle generator:flexShuffle angles:anglesShuffle options:unfoldedOptions /]


# Flip flex

Step through the images to see a flip flex on a silver octaflexagon:

[Aside]
  The *flip flex* requires at least 6 leaves per side (i.e. a hexaflexagon).
  It works well on right triangle flexagons.
  Isosceles triangle flexagons require at least 7 sides, however.
[/Aside]

[Slides width:320 height:240 pattern:'static/F/F*.jpg' start:1 end:16 /]
// Video shows flip flex on a silver octaflexagon and heptaflexagon:
// [Youtube id:"F5cj3LL8pqE" width:500 height:300 options:`{ start:120, end:145, rel:0, modestbranding:1 }` /]

[var name:'flexFlip' value:'F+' /]
[var name:'patsFlip' value:6 /]
[var name:'anglesFlip' value:`[60,90]` /]
[derived name:'initFlip' value:`[
  {angles:anglesFlip},
  {searchFlexes:"F F'"},
  {flexes: flexFlip},
  {reverseFlexes: flexFlip}
  ]` /]
[var name:'runInitFlip' value:false /]

Here are some flexagons you can use to try the flip flex:
[Button onClick:` patsFlip=6; anglesFlip=[60,90]; runInitFlip=true; `]bronze hexaflexagon[/Button],
[Button onClick:` patsFlip=7; anglesFlip=undefined; runInitFlip=true; `]heptaflexagon[/Button],
[Button onClick:` patsFlip=8; anglesFlip=undefined; runInitFlip=true; `]isosceles octaflexagon[/Button],
[Button onClick:` patsFlip=8; anglesFlip=[45,90]; runInitFlip=true; `]silver octaflexagon[/Button],
[Button onClick:` patsFlip=10; anglesFlip=undefined; runInitFlip=true; `]isosceles decaflexagon[/Button],
[Button onClick:` patsFlip=10; anglesFlip=[36, 90]; runInitFlip=true; `]right decaflexagon[/Button],
[Button onClick:` patsFlip=12; anglesFlip=undefined; runInitFlip=true; `]isosceles dodecaflexagon[/Button], or
[Button onClick:` patsFlip=12; anglesFlip=[30, 90]; runInitFlip=true; `]right dodecaflexagon[/Button].

[Flexagon width:600 height:400 numPats:patsFlip initialScript:initFlip runInitial:runInitFlip options:flexagonOptions /]

[Unfolded width:1000 height:500 numPats:patsFlip generator:flexFlip angles:anglesFlip options:unfoldedOptions /]


# Tuck flex

Step through the images to see a tuck flex on an equilateral hexaflexagon:

[Aside]
  The *tuck flex* requires at least 6 leaves per side (i.e. a hexaflexagon).
  It requires mild bending of the leaves on an equilateral hexaflexagon,
  but no bending for most other flexagons.
[/Aside]

[Slides width:320 height:240 pattern:'static/T/T*.jpg' start:1 end:14 /]
// Video shows a tuck flex on an equilateral hexaflexagon
// [Youtube id:"F5cj3LL8pqE" width:500 height:300 options:`{ start:65, end:77, rel:0, modestbranding:1 }` /]

[var name:'flexTuck' value:'T+' /]
[var name:'patsTuck' value:6 /]
[var name:'anglesTuck' value:`undefined` /]
[derived name:'initTuck' value:`[
  {angles:anglesTuck},
  {searchFlexes:"T T' T1 T1' T2 T2' T3 T3' T4 T4' T5 T5' T6 T6'"},
  {flexes: flexTuck},
  {reverseFlexes: flexTuck}
  ]` /]
[var name:'runInitTuck' value:false /]

Here are some flexagons you can use to try the tuck flex:
[Button onClick:` flexTuck='T+'; patsTuck=6; anglesTuck=undefined; runInitTuck=true; `]equilateral hexaflexagon[/Button],
[Button onClick:` flexTuck='T+'; patsTuck=6; anglesTuck=[60,30]; runInitTuck=true; `]bronze hexaflexagon #1[/Button],
[Button onClick:` flexTuck='T+'; patsTuck=6; anglesTuck=[60,90]; runInitTuck=true; `]bronze hexaflexagon #2[/Button],
[Button onClick:` flexTuck='T1+'; patsTuck=7; anglesTuck=undefined; runInitTuck=true; `]heptaflexagon #1[/Button],
[Button onClick:` flexTuck='T2+'; patsTuck=7; anglesTuck=undefined; runInitTuck=true; `]heptaflexagon #2[/Button],
[Button onClick:` flexTuck='T1+'; patsTuck=8; anglesTuck=undefined; runInitTuck=true; `]isosceles octaflexagon[/Button],
[Button onClick:` flexTuck='T1+'; patsTuck=8; anglesTuck=[45,90]; runInitTuck=true; `]silver octaflexagon #1[/Button],
[Button onClick:` flexTuck='T1+'; patsTuck=8; anglesTuck=[45,45]; runInitTuck=true; `]silver octaflexagon #2[/Button],
[Button onClick:` flexTuck='T1+'; patsTuck=10; anglesTuck=undefined; runInitTuck=true; `]isosceles decaflexagon[/Button],
[Button onClick:` flexTuck='T1+'; patsTuck=10; anglesTuck=[36, 54]; runInitTuck=true; `]right decaflexagon[/Button],
[Button onClick:` flexTuck='T1+'; patsTuck=12; anglesTuck=undefined; runInitTuck=true; `]isosceles dodecaflexagon[/Button],
[Button onClick:` flexTuck='T1+'; patsTuck=12; anglesTuck=[30, 60]; runInitTuck=true; `]right dodecaflexagon[/Button], or
[Button onClick:` flexTuck='T1+'; patsTuck=12; anglesTuck=[30, 30]; runInitTuck=true; `]star dodecaflexagon[/Button].

[Flexagon width:600 height:400 numPats:patsTuck initialScript:initTuck runInitial:runInitTuck options:flexagonOptions /]

[Unfolded width:1000 height:500 numPats:patsTuck generator:flexTuck angles:anglesTuck options:unfoldedOptions /]


# V-Flex

The v-flex on an equilateral hexaflexagon:

[Aside]
  The *v-flex* requires at least 6 leaves per side (i.e. a hexaflexagon).
[/Aside]

// TODO: delete [Unfolded/] & uncomment [Youtube/]
[Unfolded width:500 height:300 numPats:20 generator:'' /]
// [Youtube id:"F5cj3LL8pqE" width:500 height:300 options:`{ start:49, end:62, rel:0, modestbranding:1 }` /]

[var name:'flexV' value:'V+' /]
[var name:'patsV' value:6 /]
[var name:'anglesV' value:`undefined ` /]
[derived name:'initV' value:`[
  {angles:anglesV},
  {searchFlexes:"V V'"},
  {flexes: flexV},
  {reverseFlexes: flexV}
  ]` /]
[var name:'runInitV' value:false /]

[Flexagon width:600 height:400 numPats:patsV initialScript:initV runInitial:runInitV options:flexagonOptions /]

[Unfolded width:1000 height:400 numPats:patsV generator:flexV angles:anglesV options:unfoldedOptions /]


# Silver tetra

Silver tetra flex on a silver tetraflexagon, right decaflexagon, and bronze dodecaflexagon:

[Aside]
  The *silver tetra flex* requires at least 4 leaves per side (i.e. a tetraflexagon).
  It works best on right flexagons, though it works on others with enough triangles per side.

  It gets its name from the fact that the simplest flexagon it works on is the *silver tetraflexagon*.
[/Aside]

// TODO: delete [Unfolded/] & uncomment [Youtube/]
[Unfolded width:500 height:300 numPats:20 generator:'' /]
// [Youtube id:"F5cj3LL8pqE" width:500 height:300 options:`{ start:147, end:176, rel:0, modestbranding:1 }` /]

[var name:'flexSilverTetra' value:'St+' /]
[var name:'patsSilverTetra' value:6 /]
[var name:'anglesSilverTetra' value:`[60,90]` /]
[derived name:'initSilverTetra' value:`[
  {angles:anglesSilverTetra},
  {searchFlexes:"St St'"},
  {flexes: flexSilverTetra},
  {reverseFlexes: flexSilverTetra}
  ]` /]
[var name:'runInitSilverTetra' value:false /]

Here are some flexagons you can use to try the silver tetra flex:
[Button onClick:` patsSilverTetra=4; anglesSilverTetra=undefined; runInitSilverTetra=true; `]silver tetraflexagon[/Button],
[Button onClick:` patsSilverTetra=6; anglesSilverTetra=[60,90]; runInitSilverTetra=true; `]bronze hexaflexagon[/Button],
[Button onClick:` patsSilverTetra=7; anglesSilverTetra=undefined; runInitSilverTetra=true; `]heptaflexagon[/Button],
[Button onClick:` patsSilverTetra=8; anglesSilverTetra=undefined; runInitSilverTetra=true; `]isosceles octaflexagon[/Button],
[Button onClick:` patsSilverTetra=8; anglesSilverTetra=[45,90]; runInitSilverTetra=true; `]silver octaflexagon[/Button],
[Button onClick:` patsSilverTetra=10; anglesSilverTetra=undefined; runInitSilverTetra=true; `]isosceles decaflexagon[/Button],
[Button onClick:` patsSilverTetra=10; anglesSilverTetra=[36, 90]; runInitSilverTetra=true; `]right decaflexagon[/Button],
[Button onClick:` patsSilverTetra=12; anglesSilverTetra=undefined; runInitSilverTetra=true; `]isosceles dodecaflexagon[/Button], or
[Button onClick:` patsSilverTetra=12; anglesSilverTetra=[30, 90]; runInitSilverTetra=true; `]right dodecaflexagon[/Button].

[Flexagon width:600 height:400 numPats:patsSilverTetra initialScript:initSilverTetra runInitial:runInitSilverTetra options:flexagonOptions /]

[Unfolded width:1000 height:500 numPats:patsSilverTetra generator:flexSilverTetra angles:anglesSilverTetra options:unfoldedOptions /]
