[meta title:"Generating sequences" description:"Creating flexagons with flex sequences" /]

[Header
  title:"Generating sequences"
  subtitle:"Creating flexagons with flex sequences"
  author:"Scott Sherman"
  authorLink:"http://loki3.com/flex" /]

[var name:'flexagonOptions' value:`{structure:true, showIds:false, both:true}`/]
[var name:'unfoldedOptions' value:`{content:1, captions: [{ text: '*', which: 0 }, { text: '*', which: -1 }]}`/]


The [first chapter](pinch-flex.html) introduced flexagons and the pinch flex,
describing how to use the Tuckerman Traverse to explore every side.
The [second chapter](flexing.html) showed a variety of flexes and flexagons,
demonstrating that there isn't always a concept of well-defined "sides" on a flexagon.

A *generating sequence* is a sequence of flexes used to create the internal structure of a flexagon.
This chapter will show how you can use generating sequences to custom design flexagons.


# Flex notation

Recall the *flex notation* that has been used to describe a series of flexes relative to the *current vertex*.
Here's what we've defined so far:

* `>` : shift the current vertex one vertex clockwise
* `<` : shift the current vertex one vertex counterclockwise
* `^` : turn the flexagon over, keeping the same current vertex
* `F` : perform a flip flex
* `P` : perform a pinch flex
* `Sh` : perform a pyramid shuffle
* `St` : perform a silver tetra flex
* `T` : perform a tuck flex
* `V` : perform a v-flex

Additionally, you can add a `'` after a flex symbol to indicate that the flex should be done in reverse, e.g. `P'` or `Sh'`.
These symbols can be strung together to describe a series of flexes, e.g. `P>>T'^<Sh`.


# Generating structure

[Aside]
    [Flexagon width:170 height:170 numPats:6 options:`{showIds: false}` /]
[/Aside]

When the previous chapter showed the *minimal flexagon* for a given flex,
it was using a simple *generating sequence* in order to create the flexagon.

Consider starting with a hexagon.
You can think of this as a degenerate flexagon, one that can't be flexed at all.
What's the minimal amount of structure necessary you need to add to allow you to perform a pinch flex?

The answer is that every other *pat* (i.e. stack of triangles in the folded flexagon) needs to have exactly two leaves in it.
This gives you the 9-triangle straight strip that folds into the 3-sided hexaflexagon.

[Unfolded width:800 height:150 numPats:6 generator:'P+' autoLabel:true /]

You can express the concept of creating exactly the structure necessary to perform a flex
by adding either a `*` or `+` to a flex symbol.
`*` means that you add the structure and perform the flex,
while `+` means that you add the structure without performing the flex.
Thus, the 3-sided hexaflexagon has a generating sequence of `P*` or `P+`.
The difference isn't important when it's just a single flex, but it becomes more important when there are a series of flexes.

So let's look again at the minimal hexaflexagon for some of the flexes.
Pick a button with a generating sequence on it to see the resulting folded flexagon with its structure
(represented by `-`, `[- -]`, `[[- -] -]`, etc.), followed by the unfolded strip.

[var name:'generator' value:'>' /]
[derived name:'initial' value:`[
  {searchFlexes:"P Sh Sh' T T' V V'"},
  {flexes: generator}
  ]` /]
[var name:'runInitial' value:false /]

[Button onClick:` generator='P+'; runInitial=true; `]P+[/Button],
[Button onClick:` generator='Sh+'; runInitial=true; `]Sh+[/Button],
[Button onClick:` generator='T+'; runInitial=true; `]T+[/Button],
[Button onClick:` generator='V+'; runInitial=true; `]V+[/Button].

[Flexagon width:600 height:360 numPats:6 initialScript:initial runInitial:runInitial options:flexagonOptions overButton:true /]

[Unfolded width:1000 height:500 numPats:6 generator:generator options:unfoldedOptions /]


# Pinch flex sequences

Let's now do something a bit more interesting:
try to figure out generating sequences that can give us the 4, 5, 6, 7, and 8 sided flexagons from
the [flexagon intro](http://loki3.com/flex/explore/pinch-flex.html) page.

[Aside]
  [img src:'static/pinch-direction.png' /]
[/Aside]

First, let's get a feel for how different flexes travel around the pinch flex state diagram that we saw in that chapter.
Let's say we've done a pinch flex, taking us from the green circle in the diagram on the right to the red circle.

We can now step in one of three directions, depending on what we do next:

* If we do another pinch flex (`P`) in the same place, it'll take us another step to the right.
* If we instead shift the current vertex one to the right before doing a pinch flex (`>P`), we'll take a step down to the left.
* If we turn over the flexagon, shift one vertex to the right, and then do a pinch flex (`^>P`), it takes us up and to the right.

The one other thing to know is that once you travel along a *single* edge of a triangle in the pinch flex state diagram,
all the structure necessary to allow you to pinch flex along any of the other edges of that triangle must be present.

Put those facts together, and that means that applying the generating sequence `P*P*` will create exactly those two triangles in the above diagram.
You could also use `P*^>P*` to accomplish the same thing.
Since this is the state diagram for the 4-sided flexagon, either of those generating sequences can be used to create it.

[Aside]
  [PinchGraph width:400 height:200 generator:'P*P*P*^>P*P*' flexes:'P*P*P*^>P*P*' /]
[/Aside]

I'll give you one more example before letting you try on your own.
The diagram to the right is for 7-sided variant C flexagon.
The generating sequence `P*P*P*^>P*P*` can be used to create it, though there are other possibilities as well.
The diagram shows the path that sequence takes through the diagram, starting at the green circle and ending at the red circle.

You should now know enough to be able to figure out your own generating sequences by looking at a pinch flex diagram.
Below are the state diagrams for all the 5, 6, and 7-sided flexagons.

[FullWidth]
  [PinchGraph width:230 height:200 generator:'(P*)3' flexes:'' /]

  [PinchGraph width:280 height:200 generator:'P*P*P+>PP*' flexes:'' /]
  [PinchGraph width:200 height:200 generator:'(P*^>)4' flexes:'' /]
  [PinchGraph width:300 height:200 generator:'(P*)4' flexes:'' /]

  [br /]

  [PinchGraph width:210 height:200 generator:'(P*^>)5' flexes:'' /]
  [PinchGraph width:250 height:200 generator:'P* P* P* P+ > P P*' flexes:'' /]
  [PinchGraph width:270 height:200 generator:'P* P* P* ^ > P* P*' flexes:'' /]
  [PinchGraph width:320 height:200 generator:'(P*)5' flexes:'' /]
[/FullWidth]

Try creating each of those diagrams by typing in a generating sequence by using any of `>`, `<`, `^`, `P`, `P*`, and `P+`.
What's the shortest sequence for each diagram?

[var name:"pinchGenerator" value:"P*P*" /]
Generating sequence: [TextInput value:pinchGenerator /]

[PinchGraph width:500 height:200 generator:pinchGenerator flexes:pinchGenerator /]

Here are the diagrams for all the different 8-sided flexagons:

[FullWidth]
  [PinchGraph width:230 height:200 generator:'(P*^>)6' flexes:'' /]
  [PinchGraph width:230 height:200 generator:'P* P* P* P+ > P P* P*' flexes:'' /]
  [PinchGraph width:230 height:200 generator:'P*P*P*>P*P*P+>P*P*' flexes:'' /]
  [PinchGraph width:230 height:200 generator:'(P*) x 3 (^ > P*) x 3' flexes:'' /]
  [PinchGraph width:230 height:200 generator:'(P*) x 3 ^ > (P*) x 3' flexes:'' /]
  [PinchGraph width:230 height:200 generator:'P* P* ^>P* P+ <P* P* P*' flexes:'' /]
  [br /]
  [PinchGraph width:230 height:200 generator:'P* ^>P* P+ >P ^>P* P+ >P ^>P*' flexes:'' /]
  [PinchGraph width:110 height:200 generator:'P* ^>P* ^>P* P* ^>P* ^>P*' flexes:'' /]
  [PinchGraph width:230 height:200 generator:'P* P* ^>P* P+ >P ^>P* P*' flexes:'' /]
  [PinchGraph width:230 height:200 generator:'P* P* P* P* P+ > P P*' flexes:'' /]
  [PinchGraph width:230 height:200 generator:'(P*) x 4 ^ > (P*) x 2' flexes:'' /]
  [PinchGraph width:280 height:200 generator:'(P*)6' flexes:'' /]
[/FullWidth]


# General generating sequences

This final section gives you the freedom to try out generating sequences that consist of any of the other flexes we've discussed on lots of different triangle flexagons.
Type in a sequence and explore the resulting flexagon, both the simulated version and a real one to cut out and assemble.
Note that not all flexes are available on all flexagons.

[var name:'tempGenerator' value:'St*>>St*' /]
[var name:'fullGenerator' value:'St*>>St*' /]
[var name:'fullPats' value:6 /]
[var name:'fullAngles' value:`undefined` /]
[var name:'fullError' value:`undefined` /]
[derived name:'fullInit' value:`[
  {angles:fullAngles},
  {flexes: fullGenerator},
  {reverseFlexes: fullGenerator}
  ]` /]
[var name:'runFullInit' value:false /]

[Aside]
[Button onClick:` fullPats=4; fullAngles=[60,60]; runFullInit=true; `]equilateral tetraflexagon[/Button] [br/]
[Button onClick:` fullPats=4; fullAngles=[90,45]; runFullInit=true; `]silver tetraflexagon[/Button] [br/]
[Button onClick:` fullPats=5; fullAngles=undefined; runFullInit=true; `]pentaflexagon[/Button] [br/]
[Button onClick:` fullPats=6; fullAngles=undefined; runFullInit=true; `]equilateral hexaflexagon[/Button] [br/]
[Button onClick:` fullPats=6; fullAngles=[60,30]; runFullInit=true; `]bronze hexaflexagon[/Button] [br/]
[Button onClick:` fullPats=7; fullAngles=undefined; runFullInit=true; `]heptaflexagon[/Button] [br/]
[Button onClick:` fullPats=8; fullAngles=undefined; runFullInit=true; `]isosceles octaflexagon[/Button] [br/]
[Button onClick:` fullPats=8; fullAngles=[45,90]; runFullInit=true; `]silver octaflexagon[/Button] [br/]
[Button onClick:` fullPats=10; fullAngles=undefined; runFullInit=true; `]isosceles decaflexagon[/Button] [br/]
[Button onClick:` fullPats=10; fullAngles=[36, 54]; runFullInit=true; `]right decaflexagon[/Button] [br/]
[Button onClick:` fullPats=12; fullAngles=undefined; runFullInit=true; `]isosceles dodecaflexagon[/Button] [br/]
[Button onClick:` fullPats=12; fullAngles=[30, 60]; runFullInit=true; `]right dodecaflexagon[/Button] [br/]
[Button onClick:` fullPats=12; fullAngles=[30, 30]; runFullInit=true; `]star dodecaflexagon[/Button]
[/Aside]

Generating sequence: [TextInput value:tempGenerator /]
[Button onClick:` fullGenerator=tempGenerator; runFullInit=true; `]apply[/Button]  [Display value:fullError /]

[Flexagon width:600 height:360 numPats:fullPats initialScript:fullInit runInitial:runFullInit options:flexagonOptions overButton:true error:fullError /]

Unfolded strip:
[Unfolded width:1000 height:500 numPats:fullPats generator:fullGenerator angles:fullAngles options:unfoldedOptions /]
