[meta title:"Flexagon" description:"Interactive explanation of flexagons" /]

[Header
  title:"Tuckerman Traverse"
  subtitle:"Using the pinch flex to visit every side of a flexagon"
  author:"Scott Sherman"
  authorLink:"http://loki3.com/flex" /]

[var name:'drawOptions' value:`{structure:true, showIds:false}`/]
[var name:'defaultPats' value:6 /]
[var name:'defaultColors' value:`[0x2E4172, 0x2B803E, 0xAA4439, 0x622870, 0xffff00, 0x553900, 0xdddddd, 0x999999]` /]


[Aside]
  [div]
    [Inline][Flexagon width:150 height:150 numPats:6 options:`{showIds: false}` /][/Inline]
    [Inline][Flexagon width:150 height:150 numPats:9 options:`{showIds: false}` /][/Inline]
  [/div]
  [div]
    [Inline][Flexagon width:150 height:150 numPats:7 options:`{showIds: false}` /][/Inline]
    [Inline][Flexagon width:150 height:150 numPats:10 options:`{showIds: false}` initialScript:`{angles: [36, 54]}` /][/Inline]
  [/div]
[/Aside]

Flexagons are interesting puzzles made from folding strips of paper.
You can make them from a wide variety of polygons, from different shapes of triangles, to quadrilaterals, to pentagons, or others.
Once folded, you 'flex' them to find new sides and rearrange the polygons.

The most common flexagons are made up of 6 equilateral triangles arranged in a hexagon, thus they're called *hexaflexagons*.
And the most common flex is the *pinch flex*, which rearranges the triangles to reveal previously hidden faces.
But it's not obvious at first where to apply the pinch flex in order to find every face.

This explorable will teach you how to use the *Tuckerman Traverse* to find all the hidden faces.


# 3-sided hexaflexagon

[derived name:'sides3' value:`[
  {searchFlexes:"P"},
  {flexAndColor: { flexes: 'P*', colors: defaultColors }},
  {reverseFlexes: 'P*'},
  {history: 'clear'}
  ]` /]
[var name:'history3' value:'' /]

We'll start with the simple 3-sided hexaflexagon.

[Aside]
  This diagram will track the faces you've visited as you pinch flex the flexagon.
  The green circle marks the original face, and the red circle marks the current face.

  [PinchGraph width:400 height:100 generator:'P*' flexes:history3 /]
[/Aside]

[Flexagon width:500 height:300 numPats:defaultPats initialScript:sides3 history:history3 options:drawOptions /]

The unfolded strip:

[Unfolded width:800 height:150 numPats:defaultPats generator:'P*' autoLabel:true /]

[var name:"showFoldingHelp" value:false /]
[Button onClick:` showFoldingHelp = !showFoldingHelp `]Show/hide folding instructions.[/Button]
[Conditional if:` showFoldingHelp `]
  These instructions apply to all the strips on this page.

  **Cut:**
  Start by printing out the strip and cutting along the outside edges.

  **Prefold:**
  After you've cut out the shape, fold and unfold along every dashed line to prepare it.
  Note that the first and last triangle in the strip have dashed lines to indicate where to tape the edges after folding.

  **Number:**
  The large number on each triangle represents the number on the *front* of the triangle, while the small number represents the number on the *back*.
  Copy the small number from each triangle onto the back.

  **Fold:**
  Find the largest pairs of adjacent numbers and fold those numbers together.
  Then find the next largest pairs of adjacent numbers and fold them together.
  Continue in this way until the only numbers still visible are the 1's and the 2's.

  **Tape:**
  You should now have a hexagon consisting of 6 equilateral triangles.
  Tape the edges of the first and last triangles together to complete the flexagon.
[/Conditional]


# 4-sided hexaflexagon

[derived name:'sides4' value:`[
  {searchFlexes:"P"},
  {flexAndColor: { flexes: 'P*P*', colors:defaultColors }},
  {reverseFlexes: 'P*P*'},
  {history: 'clear'}
  ]` /]
[var name:'history4' value:'' /]

Next is the 4-sided hexaflexagon.

[Aside]
  [PinchGraph width:400 height:200 generator:'P*P*' flexes:history4 /]
[/Aside]

[Flexagon width:500 height:300 numPats:defaultPats initialScript:sides4 history:history4 options:drawOptions /]

The unfolded strip:

[Unfolded width:900 height:200 numPats:defaultPats generator:'P*P*' autoLabel:true /]


# 6-sided hexaflexagons

[var name:'runScript6' value:false /]
[var name:'initFlex6' value:'(P*^>)4' /]
[derived name:'sides6' value:`[
  {numPats: defaultPats},
  {searchFlexes:"P"},
  {flexAndColor: { flexes: initFlex6, colors:defaultColors }},
  {reverseFlexes: initFlex6},
  {history: 'clear'}
  ]` /]
[var name:'history6' value:'' /]

There are three different 6-sided hexaflexagon, which are made from different strips and have different traversals.
Click on the following buttons to switch between variations
[Button onClick:` initFlex6 = 'P* P* P+ > P P*'; runScript6=true; `]A[/Button],
[Button onClick:` initFlex6 = '(P*^>)4'; runScript6=true; `]B[/Button], and
[Button onClick:` initFlex6 = '(P*)4'; runScript6=true; `]C[/Button]

[Aside]
  [PinchGraph width:300 height:250 generator:initFlex6 flexes:history6 /]
[/Aside]

[Flexagon width:500 height:300 numPats:defaultPats runScript:runScript6 script:sides6 history:history6 options:drawOptions /]

The unfolded strip:

[Unfolded width:1000 height:500 numPats:defaultPats generator:initFlex6 autoLabel:true /]


# 7 and 8-sided hexaflexagons

[var name:'runScript7' value:false /]
[var name:'initFlex7' value:'P*' /]
[derived name:'sides7' value:`[
  {numPats: defaultPats},
  {searchFlexes:"P"},
  {flexAndColor: { flexes: initFlex7, colors:defaultColors }},
  {reverseFlexes: initFlex7},
  {history: 'clear'}
  ]` /]
[var name:'history7' value:'' /]
[var name:'special7' value:0 /]
[var name:'cheight7' value:500 /]

There are four 7-sided hexaflexagons and seven 8-sided hexaflexagons.
Try out the 7-sided variation
[Button onClick:` initFlex7 = 'P* P* P* P+ > P P*'; runScript7=true; special7=0; cheight7=500 `]A[/Button],
[Button onClick:` initFlex7 = 'P* P* P* ^ > P* P*'; runScript7=true; special7=0; cheight7=500 `]B[/Button],
[Button onClick:` initFlex7 = '(P*^>)5'; runScript7=true; special7=0; cheight7=500 `]C[/Button], or
[Button onClick:` initFlex7 = '(P*)5'; runScript7=true; special7=1; cheight7=1 `]D[/Button].
Or try an 8-sided variation
[Button onClick:` initFlex7 = 'P* P* P* P+ > P P* P*'; runScript7=true; special7=0; cheight7=500 `]A[/Button],
[Button onClick:` initFlex7 = 'P* P* P* P* P+ > P P*'; runScript7=true; special7=0; cheight7=500 `]B[/Button],
[Button onClick:` initFlex7 = '(P*) x 3 ^ > (P*) x 3'; runScript7=true; special7=0; cheight7=500 `]C[/Button],
[Button onClick:` initFlex7 = '(P*) x 4 ^ > (P*) x 2'; runScript7=true; special7=2; cheight7=1 `]D[/Button],
[Button onClick:` initFlex7 = '(P*) x 3 (^ > P*) x 3'; runScript7=true; special7=0; cheight7=500 `]E[/Button],
[Button onClick:` initFlex7 = '(P*^>)6'; runScript7=true; special7=0; cheight7=500 `]F[/Button], or
[Button onClick:` initFlex7 = '(P*)6'; runScript7=true; special7=3; cheight7=1 `]G[/Button].

[Aside]
  [PinchGraph width:300 height:250 generator:initFlex7 flexes:history7 /]
[/Aside]

[Flexagon width:500 height:300 numPats:defaultPats runScript:runScript7 script:sides7 history:history7 options:drawOptions /]

[Conditional if:` special7 == 0 `]
  The unfolded strip:
[/Conditional]
[Unfolded width:1000 height:500 numPats:defaultPats generator:initFlex7 autoLabel:true special7:special7 changeHeight:cheight7 /]

[Conditional if:` special7 == 1 `]
  The following strip takes a little bit of extra work to assemble.
  Cut out each of the shapes, cutting along the solid lines.
  Tape 'b' to 'b' and 'c' to 'c'.
  Then you can follow the same folding rules as for the other strips,
  finishing by taping 'a' to 'a'.

  [var name:'hepta1' value:`{start:0, end:6, scale:150, rotation:60, captions:[{ text: 'a', which: 0 }, { text: 'b', which: -1 }] }` /]
  [var name:'hepta2' value:`{start:7, end:13, scale:150, rotation:60, captions:[{ text: 'b', which: 0 }, { text: 'c', which: -1 }] }` /]
  [var name:'hepta3' value:`{start:14, scale:150, rotation:60, captions:[{ text: 'c', which: 0 }, { text: 'a', which: -1 }] }` /]
  [Unfolded width:400 height:300 numPats:defaultPats generator:'(P*)5' autoLabel:true options:hepta1 /]
  [Unfolded width:400 height:300 numPats:defaultPats generator:'(P*)5' autoLabel:true options:hepta2 /]
  [Unfolded width:400 height:300 numPats:defaultPats generator:'(P*)5' autoLabel:true options:hepta3 /]
[/Conditional]

[Conditional if:` special7 == 2 `]
  The following strip takes a little bit of extra work to assemble.
  Cut out each of the shapes, cutting along the solid lines and the lines between 'a' and 'b'.
  Tape 'b' to 'b'.
  Then you can follow the same folding rules as for the other strips,
  finishing by taping 'a' to 'a'.

  [var name:'octa1a' value:`{start:0, end:13, scale:150, rotation:60, captions:[{ text: 'a', which: 0 }, { text: 'b', which: -1 }] }` /]
  [var name:'octa2a' value:`{start:14, scale:150, rotation:60, captions:[{ text: 'b', which: 0 }, { text: 'a', which: -1 }] }` /]
  [Unfolded width:400 height:520 numPats:defaultPats generator:'(P*) x 4 ^ > (P*) x 2' autoLabel:true options:octa1a /]
  [Unfolded width:450 height:270 numPats:defaultPats generator:'(P*) x 4 ^ > (P*) x 2' autoLabel:true options:octa2a /]
[/Conditional]

[Conditional if:` special7 == 3 `]
  The following strip takes a little bit of extra work to assemble.
  Cut out each of the shapes, cutting along the solid lines.
  Tape 'b' to 'b', 'c' to 'c', and 'd' to 'd'.
  Then you can follow the same folding rules as for the other strips,
  finishing by taping 'a' to 'a'.

  [var name:'octa1b' value:`{start:0, end:6, scale:150, rotation:60, captions:[{ text: 'a', which: 0 }, { text: 'b', which: -1 }] }` /]
  [var name:'octa2b' value:`{start:7, end:14, scale:150, rotation:0, captions:[{ text: 'b', which: 0 }, { text: 'c', which: -1 }] }` /]
  [var name:'octa3b' value:`{start:15, end:22, scale:150, rotation:60, captions:[{ text: 'c', which: 0 }, { text: 'd', which: -1 }] }` /]
  [var name:'octa4b' value:`{start:23, scale:150, rotation:0, captions:[{ text: 'd', which: 0 }, { text: 'a', which: -1 }] }` /]
  [Unfolded width:500 height:280 numPats:defaultPats generator:'(P*)6' autoLabel:true options:octa1b /]
  [Unfolded width:500 height:280 numPats:defaultPats generator:'(P*)6' autoLabel:true options:octa2b /]
  [Unfolded width:500 height:280 numPats:defaultPats generator:'(P*)6' autoLabel:true options:octa3b /]
  [Unfolded width:500 height:130 numPats:defaultPats generator:'(P*)6' autoLabel:true options:octa4b /]
[/Conditional]


# Conclusion

I'll have to have enough content here that the `Conditional`s above don't cause the page to jump.

I'll have to have enough content here that the `Conditional`s above don't cause the page to jump.

I'll have to have enough content here that the `Conditional`s above don't cause the page to jump.

I'll have to have enough content here that the `Conditional`s above don't cause the page to jump.

I'll have to have enough content here that the `Conditional`s above don't cause the page to jump.

I'll have to have enough content here that the `Conditional`s above don't cause the page to jump.
